services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hermes-postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - '${DATABASE_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - hermes-network
    restart: unless-stopped
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hermes-redis
    env_file:
      - .env
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - redis_data:/data
    networks:
      - hermes-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin for PostgreSQL monitoring
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: hermes-pgadmin
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - '${PGADMIN_PORT}:80'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - hermes-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: hermes-backend
    env_file:
      - .env
      - backend/.env
    environment:
      # Database configuration (internal container communication)
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_URL: postgresql://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}

      # Redis configuration (internal container communication)
      REDIS_HOST: redis
      REDIS_PORT: 6379

      # Application port
      PORT: 3000
      APP_PORT: 3000
    ports:
      - '${BACKEND_PORT}:3000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hermes-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'nc', '-z', '127.0.0.1', '3000']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: hermes-frontend
    env_file:
      - .env
    environment:
      PORT: 3000
      HOSTNAME: '0.0.0.0'
      NODE_ENV: production
      # Override frontend URLs for Docker environment
      # Browser requests (these will be proxied by nginx)
      NEXT_PUBLIC_API_URL: http://localhost:${BACKEND_PORT}/api
      NEXT_PUBLIC_BACKEND_URL: http://localhost:${BACKEND_PORT}/api
      NEXT_PUBLIC_FRONTEND_URL: http://localhost:${FRONTEND_PORT}
      NEXT_PUBLIC_BASE_URL: /api
      NEXT_PUBLIC_API_ENDPOINT: http://localhost:${BACKEND_PORT}/api
      # Server-side requests (Docker internal networking)
      API_SCHEME_URL: http://backend:3000/api
      EXTERNAL_API_KEY: ${EXTERNAL_API_KEY}
      # Debug environment
      DEBUG: 'hermes:*'
    ports:
      - '${FRONTEND_PORT}:3000'
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - hermes-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  hermes-network:
    driver: bridge
