'use client';

import React, { ReactElement } from 'react';
import { cn } from '@/lib/utils';

// ===== Types =====
interface TabsProps {
    value: string;
    onValueChange: (value: string) => void;
    className?: string;
    children: React.ReactNode;
}

interface TabsContextProps {
    selectedValue?: string;
    onSelect?: (value: string) => void;
}

interface TabsListProps extends TabsContextProps {
    className?: string;
    children: React.ReactNode;
}

interface TabsTriggerProps extends TabsContextProps {
    value: string;
    children: React.ReactNode;
    className?: string;
}

// ===== Tabs =====
const Tabs = ({ value, onValueChange, className, children }: TabsProps) => {
    return (
        <div className={cn('w-full', className)}>
            {React.Children.map(children, (child) => {
                if (React.isValidElement(child)) {
                    return React.cloneElement(child as ReactElement<TabsContextProps>, {
                        selectedValue: value,
                        onSelect: onValueChange,
                    });
                }
                return child;
            })}
        </div>
    );
};

// ===== TabsList =====
const TabsList = ({ className, children, selectedValue, onSelect }: TabsListProps) => {
    return (
        <div className={cn('flex space-x-2', className)}>
            {React.Children.map(children, (child) => {
                if (React.isValidElement(child)) {
                    return React.cloneElement(child as ReactElement<TabsContextProps>, {
                        selectedValue,
                        onSelect,
                    });
                }
                return child;
            })}
        </div>
    );
};

// ===== TabsTrigger =====
const TabsTrigger = ({
                         value,
                         children,
                         selectedValue,
                         onSelect,
                         className,
                     }: TabsTriggerProps) => {
    const isActive = selectedValue === value;

    return (
        <button
            type="button"
            onClick={() => onSelect?.(value)}
            className={cn(
                'px-4 py-2 rounded-md text-sm font-medium transition',
                isActive
                    ? 'bg-white shadow text-gray-900 border border-gray-200'
                    : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100',
                className
            )}
        >
            {children}
        </button>
    );
};

// ===== Export =====
export { Tabs, TabsList, TabsTrigger };
