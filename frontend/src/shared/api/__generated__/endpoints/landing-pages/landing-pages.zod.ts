/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keitaro Admin API
 * OpenAPI spec version: v1
 */
import { z as zod } from 'zod';

import { fetcher } from '../../../utils/fetcher';

/**
 * Returns list of the landing pages
 * @summary Get landing pages
 */
export const getLandingPagesResponseItem = zod.object({
  id: zod.number().optional(),
  landing_type: zod.string().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  action_options: zod.object({}).optional(),
  name: zod.string().optional(),
  group_id: zod.number().optional(),
  offer_count: zod.number().optional(),
  notes: zod.string().optional(),
  state: zod.string().optional(),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  archive: zod.string().optional(),
  local_path: zod.string().optional(),
  preview_path: zod.string().optional(),
});
export const getLandingPagesResponse = zod.array(getLandingPagesResponseItem);

/**
 * Creates landing page
 * @summary Create landing page
 */
export const postLandingPagesBodyStateDefault = 'active';
export const postLandingPagesBodyLandingTypeDefault = 'local';
export const postLandingPagesBodyActionTypeDefault = 'local_file';

export const postLandingPagesBody = zod
  .object({
    name: zod.string().optional().describe('Landing page name'),
    action_payload: zod
      .string()
      .or(zod.object({}))
      .optional()
      .describe('Action payload'),
    group_id: zod.string().optional().describe('Group ID'),
    state: zod
      .enum(['active', 'disabled', 'deleted'])
      .default(postLandingPagesBodyStateDefault),
    landing_type: zod
      .enum(['local', 'external', 'preloaded', 'action'])
      .default(postLandingPagesBodyLandingTypeDefault)
      .describe('Landing page type'),
    action_type: zod
      .enum([
        'local_file',
        'http',
        'curl',
        'status404',
        'show_text',
        'show_html',
      ])
      .default(postLandingPagesBodyActionTypeDefault)
      .describe('Action type'),
    url: zod.string().optional().describe('URL'),
    archive: zod.string().optional().describe('ZIP-file encoded to base64.'),
    notes: zod.string().optional().describe('Notes'),
  })
  .and(zod.any());

export const postLandingPagesResponse = zod.object({
  id: zod.number().optional(),
  landing_type: zod.string().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  action_options: zod.object({}).optional(),
  name: zod.string().optional(),
  group_id: zod.number().optional(),
  offer_count: zod.number().optional(),
  notes: zod.string().optional(),
  state: zod.string().optional(),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  archive: zod.string().optional(),
  local_path: zod.string().optional(),
  preview_path: zod.string().optional(),
});

/**
 * Get a Landing Page
 * @summary Get Landing Page
 */
export const getLandingPagesIdParams = zod.object({
  id: zod.number().describe('Landing Page ID'),
});

export const getLandingPagesIdResponse = zod.object({
  id: zod.number().optional(),
  landing_type: zod.string().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  action_options: zod.object({}).optional(),
  name: zod.string().optional(),
  group_id: zod.number().optional(),
  offer_count: zod.number().optional(),
  notes: zod.string().optional(),
  state: zod.string().optional(),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  archive: zod.string().optional(),
  local_path: zod.string().optional(),
  preview_path: zod.string().optional(),
});

/**
 * Update a Landing Page
 * @summary Update Landing Page
 */
export const putLandingPagesIdParams = zod.object({
  id: zod.number().describe('Landing Page ID'),
});

export const putLandingPagesIdBodyStateDefault = 'active';
export const putLandingPagesIdBodyLandingTypeDefault = 'local';
export const putLandingPagesIdBodyActionTypeDefault = 'local_file';

export const putLandingPagesIdBody = zod.object({
  name: zod.string().optional().describe('Landing page name'),
  action_payload: zod
    .string()
    .or(zod.object({}))
    .optional()
    .describe('Action payload'),
  group_id: zod.string().optional().describe('Group ID'),
  state: zod
    .enum(['active', 'disabled', 'deleted'])
    .default(putLandingPagesIdBodyStateDefault),
  landing_type: zod
    .enum(['local', 'external', 'preloaded', 'action'])
    .default(putLandingPagesIdBodyLandingTypeDefault)
    .describe('Landing page type'),
  action_type: zod
    .enum(['local_file', 'http', 'curl', 'status404', 'show_text', 'show_html'])
    .default(putLandingPagesIdBodyActionTypeDefault)
    .describe('Action type'),
  url: zod.string().optional().describe('URL'),
  archive: zod.string().optional().describe('ZIP-file encoded to base64.'),
  notes: zod.string().optional().describe('Notes'),
});

export const putLandingPagesIdResponse = zod.object({
  id: zod.number().optional(),
  landing_type: zod.string().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  action_options: zod.object({}).optional(),
  name: zod.string().optional(),
  group_id: zod.number().optional(),
  offer_count: zod.number().optional(),
  notes: zod.string().optional(),
  state: zod.string().optional(),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  archive: zod.string().optional(),
  local_path: zod.string().optional(),
  preview_path: zod.string().optional(),
});

/**
 * Archive a Landing Page
 * @summary Archive Landing Page
 */
export const deleteLandingPagesIdParams = zod.object({
  id: zod.number().describe('Landing Page ID'),
});

export const deleteLandingPagesIdResponse = zod.object({
  id: zod.number().optional(),
  landing_type: zod.string().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  action_options: zod.object({}).optional(),
  name: zod.string().optional(),
  group_id: zod.number().optional(),
  offer_count: zod.number().optional(),
  notes: zod.string().optional(),
  state: zod.string().optional(),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  archive: zod.string().optional(),
  local_path: zod.string().optional(),
  preview_path: zod.string().optional(),
});

/**
 * Create a Local Landing Page File
 * @summary Create a File
 */
export const postLandingPagesIdAddFileParams = zod.object({
  id: zod.number().describe('Landing Page ID'),
});

export const postLandingPagesIdAddFileQueryParams = zod.object({
  path: zod.string().describe('Path to the File'),
});

export const postLandingPagesIdAddFileResponse = zod.object({
  path: zod.string().optional(),
});

/**
 * Clone a Landing Page
 * @summary Clone Landing Page
 */
export const putLandingPagesIdCloneParams = zod.object({
  id: zod.number().describe('Landing Page ID'),
});

export const putLandingPagesIdCloneResponse = zod.object({
  id: zod.number().optional(),
  landing_type: zod.string().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  action_options: zod.object({}).optional(),
  name: zod.string().optional(),
  group_id: zod.number().optional(),
  offer_count: zod.number().optional(),
  notes: zod.string().optional(),
  state: zod.string().optional(),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  archive: zod.string().optional(),
  local_path: zod.string().optional(),
  preview_path: zod.string().optional(),
});

/**
 * Pack and Download the Files of the Landing Page
 * @summary Download
 */
export const getLandingPagesIdDownloadParams = zod.object({
  id: zod.number().describe('Landing Page ID'),
});

/**
 * Read the Content of the File
 * @summary Read File
 */
export const getLandingPagesIdGetFileParams = zod.object({
  id: zod.number().describe('Landing Page ID'),
});

export const getLandingPagesIdGetFileQueryParams = zod.object({
  path: zod
    .string()
    .describe('File path. It must be relative, i.e. `order/success.html`.'),
});

export const getLandingPagesIdGetFileResponse = zod.object({
  data: zod.string().optional(),
});

/**
 * Get Files Structure of the Local Landing Page
 * @summary Get Files Structure
 */
export const getLandingPagesIdGetStructureParams = zod.object({
  id: zod.number().describe('Landing Page ID'),
});

export const getLandingPagesIdGetStructureResponse = zod.object({
  name: zod.string().optional(),
  type: zod.string().optional(),
  ext: zod.string().optional(),
  path: zod.string().optional(),
  children: zod.array(zod.any()).optional(),
});

/**
 * Remove the File of the Local Landing Page
 * @summary Remove file
 */
export const deleteLandingPagesIdRemoveFileParams = zod.object({
  id: zod.number().describe('Landing Page ID'),
});

export const deleteLandingPagesIdRemoveFileQueryParams = zod.object({
  path: zod.string().describe('Path to the File'),
});

export const deleteLandingPagesIdRemoveFileResponse = zod.object({
  success: zod.boolean().optional(),
});

/**
 * Restore a landing page
 * @summary Restore landing page
 */
export const postLandingPagesIdRestoreParams = zod.object({
  id: zod.number().describe('Landing page ID'),
});

/**
 * Save the File Data of the Local Landing Page
 * @summary Save File Data
 */
export const putLandingPagesIdUpdateFileParams = zod.object({
  id: zod.number().describe('Landing Page ID'),
});

export const putLandingPagesIdUpdateFileQueryParams = zod.object({
  path: zod.string().describe('Path to the File'),
  data: zod.string().describe('New File Data'),
});

export const putLandingPagesIdUpdateFileResponse = zod.object({
  path: zod.string().optional(),
});

/**
 * Get deleted landing pages
 * @summary Get deleted landing pages
 */
export const getLandingPagesDeletedResponseItem = zod.object({
  id: zod.number().optional(),
  landing_type: zod.string().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  action_options: zod.object({}).optional(),
  name: zod.string().optional(),
  group_id: zod.number().optional(),
  offer_count: zod.number().optional(),
  notes: zod.string().optional(),
  state: zod.string().optional(),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  archive: zod.string().optional(),
  local_path: zod.string().optional(),
  preview_path: zod.string().optional(),
});
export const getLandingPagesDeletedResponse = zod.array(
  getLandingPagesDeletedResponseItem
);
