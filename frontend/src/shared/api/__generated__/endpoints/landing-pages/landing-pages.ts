/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Keitaro Admin API
 * OpenAPI spec version: v1
 */
import type {
  BadRequestResponse,
  DeleteLandingPagesIdRemoveFile200,
  DeleteLandingPagesIdRemoveFileParams,
  EditorFiles,
  GetLandingPagesIdGetFile200,
  GetLandingPagesIdGetFileParams,
  InternalErrorResponse,
  Landing,
  LandingRequest,
  NotAcceptableResponse,
  NotFoundResponse,
  PaymentRequiredResponse,
  PostLandingPagesBody,
  PostLandingPagesIdAddFile200,
  PostLandingPagesIdAddFileParams,
  PutLandingPagesIdUpdateFile200,
  PutLandingPagesIdUpdateFileParams,
  UnauthorizedResponse,
} from '../../models';

import { fetcher } from '../../../utils/fetcher';

/**
 * Returns list of the landing pages
 * @summary Get landing pages
 */
export type getLandingPagesResponse200 = {
  data: Landing[];
  status: 200;
};

export type getLandingPagesResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getLandingPagesResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getLandingPagesResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getLandingPagesResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getLandingPagesResponseComposite =
  | getLandingPagesResponse200
  | getLandingPagesResponse400
  | getLandingPagesResponse401
  | getLandingPagesResponse402
  | getLandingPagesResponse500;

export type getLandingPagesResponse = getLandingPagesResponseComposite & {
  headers: Headers;
};

export const getGetLandingPagesUrl = () => {
  return `https://admin-api.docs.keitaro.io/landing_pages`;
};

export const getLandingPages = async (
  options?: RequestInit,
): Promise<getLandingPagesResponse> => {
  return fetcher<getLandingPagesResponse>(getGetLandingPagesUrl(), {
    ...options,
    method: 'GET',
  });
};

/**
 * Creates landing page
 * @summary Create landing page
 */
export type postLandingPagesResponse200 = {
  data: Landing;
  status: 200;
};

export type postLandingPagesResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postLandingPagesResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postLandingPagesResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postLandingPagesResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postLandingPagesResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postLandingPagesResponseComposite =
  | postLandingPagesResponse200
  | postLandingPagesResponse400
  | postLandingPagesResponse401
  | postLandingPagesResponse402
  | postLandingPagesResponse406
  | postLandingPagesResponse500;

export type postLandingPagesResponse = postLandingPagesResponseComposite & {
  headers: Headers;
};

export const getPostLandingPagesUrl = () => {
  return `https://admin-api.docs.keitaro.io/landing_pages`;
};

export const postLandingPages = async (
  postLandingPagesBody: PostLandingPagesBody,
  options?: RequestInit,
): Promise<postLandingPagesResponse> => {
  return fetcher<postLandingPagesResponse>(getPostLandingPagesUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postLandingPagesBody),
  });
};

/**
 * Get a Landing Page
 * @summary Get Landing Page
 */
export type getLandingPagesIdResponse200 = {
  data: Landing;
  status: 200;
};

export type getLandingPagesIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getLandingPagesIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getLandingPagesIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getLandingPagesIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type getLandingPagesIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getLandingPagesIdResponseComposite =
  | getLandingPagesIdResponse200
  | getLandingPagesIdResponse400
  | getLandingPagesIdResponse401
  | getLandingPagesIdResponse402
  | getLandingPagesIdResponse404
  | getLandingPagesIdResponse500;

export type getLandingPagesIdResponse = getLandingPagesIdResponseComposite & {
  headers: Headers;
};

export const getGetLandingPagesIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/landing_pages/${id}`;
};

export const getLandingPagesId = async (
  id: number,
  options?: RequestInit,
): Promise<getLandingPagesIdResponse> => {
  return fetcher<getLandingPagesIdResponse>(getGetLandingPagesIdUrl(id), {
    ...options,
    method: 'GET',
  });
};

/**
 * Update a Landing Page
 * @summary Update Landing Page
 */
export type putLandingPagesIdResponse200 = {
  data: Landing;
  status: 200;
};

export type putLandingPagesIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type putLandingPagesIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type putLandingPagesIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type putLandingPagesIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type putLandingPagesIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type putLandingPagesIdResponseComposite =
  | putLandingPagesIdResponse200
  | putLandingPagesIdResponse400
  | putLandingPagesIdResponse401
  | putLandingPagesIdResponse402
  | putLandingPagesIdResponse404
  | putLandingPagesIdResponse500;

export type putLandingPagesIdResponse = putLandingPagesIdResponseComposite & {
  headers: Headers;
};

export const getPutLandingPagesIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/landing_pages/${id}`;
};

export const putLandingPagesId = async (
  id: number,
  landingRequest: LandingRequest,
  options?: RequestInit,
): Promise<putLandingPagesIdResponse> => {
  return fetcher<putLandingPagesIdResponse>(getPutLandingPagesIdUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(landingRequest),
  });
};

/**
 * Archive a Landing Page
 * @summary Archive Landing Page
 */
export type deleteLandingPagesIdResponse200 = {
  data: Landing;
  status: 200;
};

export type deleteLandingPagesIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type deleteLandingPagesIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type deleteLandingPagesIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type deleteLandingPagesIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type deleteLandingPagesIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type deleteLandingPagesIdResponseComposite =
  | deleteLandingPagesIdResponse200
  | deleteLandingPagesIdResponse400
  | deleteLandingPagesIdResponse401
  | deleteLandingPagesIdResponse402
  | deleteLandingPagesIdResponse404
  | deleteLandingPagesIdResponse500;

export type deleteLandingPagesIdResponse =
  deleteLandingPagesIdResponseComposite & {
    headers: Headers;
  };

export const getDeleteLandingPagesIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/landing_pages/${id}`;
};

export const deleteLandingPagesId = async (
  id: number,
  options?: RequestInit,
): Promise<deleteLandingPagesIdResponse> => {
  return fetcher<deleteLandingPagesIdResponse>(getDeleteLandingPagesIdUrl(id), {
    ...options,
    method: 'DELETE',
  });
};

/**
 * Create a Local Landing Page File
 * @summary Create a File
 */
export type postLandingPagesIdAddFileResponse200 = {
  data: PostLandingPagesIdAddFile200;
  status: 200;
};

export type postLandingPagesIdAddFileResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postLandingPagesIdAddFileResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postLandingPagesIdAddFileResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postLandingPagesIdAddFileResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postLandingPagesIdAddFileResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postLandingPagesIdAddFileResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postLandingPagesIdAddFileResponseComposite =
  | postLandingPagesIdAddFileResponse200
  | postLandingPagesIdAddFileResponse400
  | postLandingPagesIdAddFileResponse401
  | postLandingPagesIdAddFileResponse402
  | postLandingPagesIdAddFileResponse404
  | postLandingPagesIdAddFileResponse406
  | postLandingPagesIdAddFileResponse500;

export type postLandingPagesIdAddFileResponse =
  postLandingPagesIdAddFileResponseComposite & {
    headers: Headers;
  };

export const getPostLandingPagesIdAddFileUrl = (
  id: number,
  params: PostLandingPagesIdAddFileParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://admin-api.docs.keitaro.io/landing_pages/${id}/add_file?${stringifiedParams}`
    : `https://admin-api.docs.keitaro.io/landing_pages/${id}/add_file`;
};

export const postLandingPagesIdAddFile = async (
  id: number,
  params: PostLandingPagesIdAddFileParams,
  options?: RequestInit,
): Promise<postLandingPagesIdAddFileResponse> => {
  return fetcher<postLandingPagesIdAddFileResponse>(
    getPostLandingPagesIdAddFileUrl(id, params),
    {
      ...options,
      method: 'POST',
    },
  );
};

/**
 * Clone a Landing Page
 * @summary Clone Landing Page
 */
export type putLandingPagesIdCloneResponse200 = {
  data: Landing;
  status: 200;
};

export type putLandingPagesIdCloneResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type putLandingPagesIdCloneResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type putLandingPagesIdCloneResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type putLandingPagesIdCloneResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type putLandingPagesIdCloneResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type putLandingPagesIdCloneResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type putLandingPagesIdCloneResponseComposite =
  | putLandingPagesIdCloneResponse200
  | putLandingPagesIdCloneResponse400
  | putLandingPagesIdCloneResponse401
  | putLandingPagesIdCloneResponse402
  | putLandingPagesIdCloneResponse404
  | putLandingPagesIdCloneResponse406
  | putLandingPagesIdCloneResponse500;

export type putLandingPagesIdCloneResponse =
  putLandingPagesIdCloneResponseComposite & {
    headers: Headers;
  };

export const getPutLandingPagesIdCloneUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/landing_pages/${id}/clone`;
};

export const putLandingPagesIdClone = async (
  id: number,
  options?: RequestInit,
): Promise<putLandingPagesIdCloneResponse> => {
  return fetcher<putLandingPagesIdCloneResponse>(
    getPutLandingPagesIdCloneUrl(id),
    {
      ...options,
      method: 'PUT',
    },
  );
};

/**
 * Pack and Download the Files of the Landing Page
 * @summary Download
 */
export type getLandingPagesIdDownloadResponse200 = {
  data: string;
  status: 200;
};

export type getLandingPagesIdDownloadResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getLandingPagesIdDownloadResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getLandingPagesIdDownloadResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getLandingPagesIdDownloadResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type getLandingPagesIdDownloadResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type getLandingPagesIdDownloadResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getLandingPagesIdDownloadResponseComposite =
  | getLandingPagesIdDownloadResponse200
  | getLandingPagesIdDownloadResponse400
  | getLandingPagesIdDownloadResponse401
  | getLandingPagesIdDownloadResponse402
  | getLandingPagesIdDownloadResponse404
  | getLandingPagesIdDownloadResponse406
  | getLandingPagesIdDownloadResponse500;

export type getLandingPagesIdDownloadResponse =
  getLandingPagesIdDownloadResponseComposite & {
    headers: Headers;
  };

export const getGetLandingPagesIdDownloadUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/landing_pages/${id}/download`;
};

export const getLandingPagesIdDownload = async (
  id: number,
  options?: RequestInit,
): Promise<getLandingPagesIdDownloadResponse> => {
  return fetcher<getLandingPagesIdDownloadResponse>(
    getGetLandingPagesIdDownloadUrl(id),
    {
      ...options,
      method: 'GET',
    },
  );
};

/**
 * Read the Content of the File
 * @summary Read File
 */
export type getLandingPagesIdGetFileResponse200 = {
  data: GetLandingPagesIdGetFile200;
  status: 200;
};

export type getLandingPagesIdGetFileResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getLandingPagesIdGetFileResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getLandingPagesIdGetFileResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getLandingPagesIdGetFileResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type getLandingPagesIdGetFileResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type getLandingPagesIdGetFileResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getLandingPagesIdGetFileResponseComposite =
  | getLandingPagesIdGetFileResponse200
  | getLandingPagesIdGetFileResponse400
  | getLandingPagesIdGetFileResponse401
  | getLandingPagesIdGetFileResponse402
  | getLandingPagesIdGetFileResponse404
  | getLandingPagesIdGetFileResponse406
  | getLandingPagesIdGetFileResponse500;

export type getLandingPagesIdGetFileResponse =
  getLandingPagesIdGetFileResponseComposite & {
    headers: Headers;
  };

export const getGetLandingPagesIdGetFileUrl = (
  id: number,
  params: GetLandingPagesIdGetFileParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://admin-api.docs.keitaro.io/landing_pages/${id}/get_file?${stringifiedParams}`
    : `https://admin-api.docs.keitaro.io/landing_pages/${id}/get_file`;
};

export const getLandingPagesIdGetFile = async (
  id: number,
  params: GetLandingPagesIdGetFileParams,
  options?: RequestInit,
): Promise<getLandingPagesIdGetFileResponse> => {
  return fetcher<getLandingPagesIdGetFileResponse>(
    getGetLandingPagesIdGetFileUrl(id, params),
    {
      ...options,
      method: 'GET',
    },
  );
};

/**
 * Get Files Structure of the Local Landing Page
 * @summary Get Files Structure
 */
export type getLandingPagesIdGetStructureResponse200 = {
  data: EditorFiles;
  status: 200;
};

export type getLandingPagesIdGetStructureResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getLandingPagesIdGetStructureResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getLandingPagesIdGetStructureResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getLandingPagesIdGetStructureResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type getLandingPagesIdGetStructureResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type getLandingPagesIdGetStructureResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getLandingPagesIdGetStructureResponseComposite =
  | getLandingPagesIdGetStructureResponse200
  | getLandingPagesIdGetStructureResponse400
  | getLandingPagesIdGetStructureResponse401
  | getLandingPagesIdGetStructureResponse402
  | getLandingPagesIdGetStructureResponse404
  | getLandingPagesIdGetStructureResponse406
  | getLandingPagesIdGetStructureResponse500;

export type getLandingPagesIdGetStructureResponse =
  getLandingPagesIdGetStructureResponseComposite & {
    headers: Headers;
  };

export const getGetLandingPagesIdGetStructureUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/landing_pages/${id}/get_structure`;
};

export const getLandingPagesIdGetStructure = async (
  id: number,
  options?: RequestInit,
): Promise<getLandingPagesIdGetStructureResponse> => {
  return fetcher<getLandingPagesIdGetStructureResponse>(
    getGetLandingPagesIdGetStructureUrl(id),
    {
      ...options,
      method: 'GET',
    },
  );
};

/**
 * Remove the File of the Local Landing Page
 * @summary Remove file
 */
export type deleteLandingPagesIdRemoveFileResponse200 = {
  data: DeleteLandingPagesIdRemoveFile200;
  status: 200;
};

export type deleteLandingPagesIdRemoveFileResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type deleteLandingPagesIdRemoveFileResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type deleteLandingPagesIdRemoveFileResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type deleteLandingPagesIdRemoveFileResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type deleteLandingPagesIdRemoveFileResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type deleteLandingPagesIdRemoveFileResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type deleteLandingPagesIdRemoveFileResponseComposite =
  | deleteLandingPagesIdRemoveFileResponse200
  | deleteLandingPagesIdRemoveFileResponse400
  | deleteLandingPagesIdRemoveFileResponse401
  | deleteLandingPagesIdRemoveFileResponse402
  | deleteLandingPagesIdRemoveFileResponse404
  | deleteLandingPagesIdRemoveFileResponse406
  | deleteLandingPagesIdRemoveFileResponse500;

export type deleteLandingPagesIdRemoveFileResponse =
  deleteLandingPagesIdRemoveFileResponseComposite & {
    headers: Headers;
  };

export const getDeleteLandingPagesIdRemoveFileUrl = (
  id: number,
  params: DeleteLandingPagesIdRemoveFileParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://admin-api.docs.keitaro.io/landing_pages/${id}/remove_file?${stringifiedParams}`
    : `https://admin-api.docs.keitaro.io/landing_pages/${id}/remove_file`;
};

export const deleteLandingPagesIdRemoveFile = async (
  id: number,
  params: DeleteLandingPagesIdRemoveFileParams,
  options?: RequestInit,
): Promise<deleteLandingPagesIdRemoveFileResponse> => {
  return fetcher<deleteLandingPagesIdRemoveFileResponse>(
    getDeleteLandingPagesIdRemoveFileUrl(id, params),
    {
      ...options,
      method: 'DELETE',
    },
  );
};

/**
 * Restore a landing page
 * @summary Restore landing page
 */
export type postLandingPagesIdRestoreResponse201 = {
  data: Landing;
  status: 201;
};

export type postLandingPagesIdRestoreResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postLandingPagesIdRestoreResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postLandingPagesIdRestoreResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postLandingPagesIdRestoreResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postLandingPagesIdRestoreResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postLandingPagesIdRestoreResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postLandingPagesIdRestoreResponseComposite =
  | postLandingPagesIdRestoreResponse201
  | postLandingPagesIdRestoreResponse400
  | postLandingPagesIdRestoreResponse401
  | postLandingPagesIdRestoreResponse402
  | postLandingPagesIdRestoreResponse404
  | postLandingPagesIdRestoreResponse406
  | postLandingPagesIdRestoreResponse500;

export type postLandingPagesIdRestoreResponse =
  postLandingPagesIdRestoreResponseComposite & {
    headers: Headers;
  };

export const getPostLandingPagesIdRestoreUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/landing_pages/${id}/restore`;
};

export const postLandingPagesIdRestore = async (
  id: number,
  options?: RequestInit,
): Promise<postLandingPagesIdRestoreResponse> => {
  return fetcher<postLandingPagesIdRestoreResponse>(
    getPostLandingPagesIdRestoreUrl(id),
    {
      ...options,
      method: 'POST',
    },
  );
};

/**
 * Save the File Data of the Local Landing Page
 * @summary Save File Data
 */
export type putLandingPagesIdUpdateFileResponse200 = {
  data: PutLandingPagesIdUpdateFile200;
  status: 200;
};

export type putLandingPagesIdUpdateFileResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type putLandingPagesIdUpdateFileResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type putLandingPagesIdUpdateFileResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type putLandingPagesIdUpdateFileResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type putLandingPagesIdUpdateFileResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type putLandingPagesIdUpdateFileResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type putLandingPagesIdUpdateFileResponseComposite =
  | putLandingPagesIdUpdateFileResponse200
  | putLandingPagesIdUpdateFileResponse400
  | putLandingPagesIdUpdateFileResponse401
  | putLandingPagesIdUpdateFileResponse402
  | putLandingPagesIdUpdateFileResponse404
  | putLandingPagesIdUpdateFileResponse406
  | putLandingPagesIdUpdateFileResponse500;

export type putLandingPagesIdUpdateFileResponse =
  putLandingPagesIdUpdateFileResponseComposite & {
    headers: Headers;
  };

export const getPutLandingPagesIdUpdateFileUrl = (
  id: number,
  params: PutLandingPagesIdUpdateFileParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://admin-api.docs.keitaro.io/landing_pages/${id}/update_file?${stringifiedParams}`
    : `https://admin-api.docs.keitaro.io/landing_pages/${id}/update_file`;
};

export const putLandingPagesIdUpdateFile = async (
  id: number,
  params: PutLandingPagesIdUpdateFileParams,
  options?: RequestInit,
): Promise<putLandingPagesIdUpdateFileResponse> => {
  return fetcher<putLandingPagesIdUpdateFileResponse>(
    getPutLandingPagesIdUpdateFileUrl(id, params),
    {
      ...options,
      method: 'PUT',
    },
  );
};

/**
 * Clean archive
 * @summary Clean archive
 */
export type postLandingPagesCleanArchiveResponse200 = {
  data: void;
  status: 200;
};

export type postLandingPagesCleanArchiveResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postLandingPagesCleanArchiveResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postLandingPagesCleanArchiveResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postLandingPagesCleanArchiveResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postLandingPagesCleanArchiveResponseComposite =
  | postLandingPagesCleanArchiveResponse200
  | postLandingPagesCleanArchiveResponse400
  | postLandingPagesCleanArchiveResponse401
  | postLandingPagesCleanArchiveResponse402
  | postLandingPagesCleanArchiveResponse500;

export type postLandingPagesCleanArchiveResponse =
  postLandingPagesCleanArchiveResponseComposite & {
    headers: Headers;
  };

export const getPostLandingPagesCleanArchiveUrl = () => {
  return `https://admin-api.docs.keitaro.io/landing_pages/clean_archive`;
};

export const postLandingPagesCleanArchive = async (
  options?: RequestInit,
): Promise<postLandingPagesCleanArchiveResponse> => {
  return fetcher<postLandingPagesCleanArchiveResponse>(
    getPostLandingPagesCleanArchiveUrl(),
    {
      ...options,
      method: 'POST',
    },
  );
};

/**
 * Get deleted landing pages
 * @summary Get deleted landing pages
 */
export type getLandingPagesDeletedResponse200 = {
  data: Landing[];
  status: 200;
};

export type getLandingPagesDeletedResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getLandingPagesDeletedResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getLandingPagesDeletedResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getLandingPagesDeletedResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getLandingPagesDeletedResponseComposite =
  | getLandingPagesDeletedResponse200
  | getLandingPagesDeletedResponse400
  | getLandingPagesDeletedResponse401
  | getLandingPagesDeletedResponse402
  | getLandingPagesDeletedResponse500;

export type getLandingPagesDeletedResponse =
  getLandingPagesDeletedResponseComposite & {
    headers: Headers;
  };

export const getGetLandingPagesDeletedUrl = () => {
  return `https://admin-api.docs.keitaro.io/landing_pages/deleted`;
};

export const getLandingPagesDeleted = async (
  options?: RequestInit,
): Promise<getLandingPagesDeletedResponse> => {
  return fetcher<getLandingPagesDeletedResponse>(
    getGetLandingPagesDeletedUrl(),
    {
      ...options,
      method: 'GET',
    },
  );
};
