/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Keitaro Admin API
 * OpenAPI spec version: v1
 */
import type {
  BadRequestResponse,
  DeleteIntegrationsFacebookId200,
  DeleteIntegrationsFacebookIdCampaignBody,
  Facebook,
  FacebookRequest,
  GetIntegrationsFacebook200,
  GetIntegrationsFacebookId200,
  InternalErrorResponse,
  NotAcceptableResponse,
  OptionNumber,
  PaymentRequiredResponse,
  PostIntegrationsFacebookIdCampaignBody,
  PutIntegrationsFacebookId200,
  UnauthorizedResponse,
} from '../../models';

import { fetcher } from '../../../utils/fetcher';

/**
 * Returns list of Facebook integrations
 * @summary Get Facebook integrations
 */
export type getIntegrationsFacebookResponse200 = {
  data: GetIntegrationsFacebook200;
  status: 200;
};

export type getIntegrationsFacebookResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getIntegrationsFacebookResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getIntegrationsFacebookResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getIntegrationsFacebookResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getIntegrationsFacebookResponseComposite =
  | getIntegrationsFacebookResponse200
  | getIntegrationsFacebookResponse400
  | getIntegrationsFacebookResponse401
  | getIntegrationsFacebookResponse402
  | getIntegrationsFacebookResponse500;

export type getIntegrationsFacebookResponse =
  getIntegrationsFacebookResponseComposite & {
    headers: Headers;
  };

export const getGetIntegrationsFacebookUrl = () => {
  return `https://admin-api.docs.keitaro.io/integrations/facebook`;
};

export const getIntegrationsFacebook = async (
  options?: RequestInit,
): Promise<getIntegrationsFacebookResponse> => {
  return fetcher<getIntegrationsFacebookResponse>(
    getGetIntegrationsFacebookUrl(),
    {
      ...options,
      method: 'GET',
    },
  );
};

/**
 * Creates Facebook integration.
 * @summary Create Facebook Integration
 */
export type postIntegrationsFacebookResponse200 = {
  data: Facebook;
  status: 200;
};

export type postIntegrationsFacebookResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postIntegrationsFacebookResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postIntegrationsFacebookResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postIntegrationsFacebookResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postIntegrationsFacebookResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postIntegrationsFacebookResponseComposite =
  | postIntegrationsFacebookResponse200
  | postIntegrationsFacebookResponse400
  | postIntegrationsFacebookResponse401
  | postIntegrationsFacebookResponse402
  | postIntegrationsFacebookResponse406
  | postIntegrationsFacebookResponse500;

export type postIntegrationsFacebookResponse =
  postIntegrationsFacebookResponseComposite & {
    headers: Headers;
  };

export const getPostIntegrationsFacebookUrl = () => {
  return `https://admin-api.docs.keitaro.io/integrations/facebook`;
};

export const postIntegrationsFacebook = async (
  facebookRequest: FacebookRequest,
  options?: RequestInit,
): Promise<postIntegrationsFacebookResponse> => {
  return fetcher<postIntegrationsFacebookResponse>(
    getPostIntegrationsFacebookUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(facebookRequest),
    },
  );
};

/**
 * Returns Facebook integration details
 * @summary Get Facebook integration
 */
export type getIntegrationsFacebookIdResponse200 = {
  data: GetIntegrationsFacebookId200;
  status: 200;
};

export type getIntegrationsFacebookIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getIntegrationsFacebookIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getIntegrationsFacebookIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getIntegrationsFacebookIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getIntegrationsFacebookIdResponseComposite =
  | getIntegrationsFacebookIdResponse200
  | getIntegrationsFacebookIdResponse400
  | getIntegrationsFacebookIdResponse401
  | getIntegrationsFacebookIdResponse402
  | getIntegrationsFacebookIdResponse500;

export type getIntegrationsFacebookIdResponse =
  getIntegrationsFacebookIdResponseComposite & {
    headers: Headers;
  };

export const getGetIntegrationsFacebookIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/integrations/facebook/${id}`;
};

export const getIntegrationsFacebookId = async (
  id: number,
  options?: RequestInit,
): Promise<getIntegrationsFacebookIdResponse> => {
  return fetcher<getIntegrationsFacebookIdResponse>(
    getGetIntegrationsFacebookIdUrl(id),
    {
      ...options,
      method: 'GET',
    },
  );
};

/**
 * Updates Facebook integration.
 * @summary Update Facebook integration
 */
export type putIntegrationsFacebookIdResponse200 = {
  data: PutIntegrationsFacebookId200;
  status: 200;
};

export type putIntegrationsFacebookIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type putIntegrationsFacebookIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type putIntegrationsFacebookIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type putIntegrationsFacebookIdResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type putIntegrationsFacebookIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type putIntegrationsFacebookIdResponseComposite =
  | putIntegrationsFacebookIdResponse200
  | putIntegrationsFacebookIdResponse400
  | putIntegrationsFacebookIdResponse401
  | putIntegrationsFacebookIdResponse402
  | putIntegrationsFacebookIdResponse406
  | putIntegrationsFacebookIdResponse500;

export type putIntegrationsFacebookIdResponse =
  putIntegrationsFacebookIdResponseComposite & {
    headers: Headers;
  };

export const getPutIntegrationsFacebookIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/integrations/facebook/${id}`;
};

export const putIntegrationsFacebookId = async (
  id: number,
  facebookRequest: FacebookRequest,
  options?: RequestInit,
): Promise<putIntegrationsFacebookIdResponse> => {
  return fetcher<putIntegrationsFacebookIdResponse>(
    getPutIntegrationsFacebookIdUrl(id),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(facebookRequest),
    },
  );
};

/**
 * Delete Facebook integration
 * @summary Delete Facebook integration
 */
export type deleteIntegrationsFacebookIdResponse200 = {
  data: DeleteIntegrationsFacebookId200;
  status: 200;
};

export type deleteIntegrationsFacebookIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type deleteIntegrationsFacebookIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type deleteIntegrationsFacebookIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type deleteIntegrationsFacebookIdResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type deleteIntegrationsFacebookIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type deleteIntegrationsFacebookIdResponseComposite =
  | deleteIntegrationsFacebookIdResponse200
  | deleteIntegrationsFacebookIdResponse400
  | deleteIntegrationsFacebookIdResponse401
  | deleteIntegrationsFacebookIdResponse402
  | deleteIntegrationsFacebookIdResponse406
  | deleteIntegrationsFacebookIdResponse500;

export type deleteIntegrationsFacebookIdResponse =
  deleteIntegrationsFacebookIdResponseComposite & {
    headers: Headers;
  };

export const getDeleteIntegrationsFacebookIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/integrations/facebook/${id}`;
};

export const deleteIntegrationsFacebookId = async (
  id: number,
  options?: RequestInit,
): Promise<deleteIntegrationsFacebookIdResponse> => {
  return fetcher<deleteIntegrationsFacebookIdResponse>(
    getDeleteIntegrationsFacebookIdUrl(id),
    {
      ...options,
      method: 'DELETE',
    },
  );
};

/**
 * Returns list of assigned campaigns.
 * @summary Get assigned campaigns.
 */
export type getIntegrationsFacebookIdCampaignResponse200 = {
  data: OptionNumber[];
  status: 200;
};

export type getIntegrationsFacebookIdCampaignResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getIntegrationsFacebookIdCampaignResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getIntegrationsFacebookIdCampaignResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getIntegrationsFacebookIdCampaignResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getIntegrationsFacebookIdCampaignResponseComposite =
  | getIntegrationsFacebookIdCampaignResponse200
  | getIntegrationsFacebookIdCampaignResponse400
  | getIntegrationsFacebookIdCampaignResponse401
  | getIntegrationsFacebookIdCampaignResponse402
  | getIntegrationsFacebookIdCampaignResponse500;

export type getIntegrationsFacebookIdCampaignResponse =
  getIntegrationsFacebookIdCampaignResponseComposite & {
    headers: Headers;
  };

export const getGetIntegrationsFacebookIdCampaignUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/integrations/facebook/${id}/campaign`;
};

export const getIntegrationsFacebookIdCampaign = async (
  id: number,
  options?: RequestInit,
): Promise<getIntegrationsFacebookIdCampaignResponse> => {
  return fetcher<getIntegrationsFacebookIdCampaignResponse>(
    getGetIntegrationsFacebookIdCampaignUrl(id),
    {
      ...options,
      method: 'GET',
    },
  );
};

/**
 * Assigns FB integration to campaigns.
 * @summary Assign to campaign
 */
export type postIntegrationsFacebookIdCampaignResponse200 = {
  data: void;
  status: 200;
};

export type postIntegrationsFacebookIdCampaignResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postIntegrationsFacebookIdCampaignResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postIntegrationsFacebookIdCampaignResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postIntegrationsFacebookIdCampaignResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postIntegrationsFacebookIdCampaignResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postIntegrationsFacebookIdCampaignResponseComposite =
  | postIntegrationsFacebookIdCampaignResponse200
  | postIntegrationsFacebookIdCampaignResponse400
  | postIntegrationsFacebookIdCampaignResponse401
  | postIntegrationsFacebookIdCampaignResponse402
  | postIntegrationsFacebookIdCampaignResponse406
  | postIntegrationsFacebookIdCampaignResponse500;

export type postIntegrationsFacebookIdCampaignResponse =
  postIntegrationsFacebookIdCampaignResponseComposite & {
    headers: Headers;
  };

export const getPostIntegrationsFacebookIdCampaignUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/integrations/facebook/${id}/campaign`;
};

export const postIntegrationsFacebookIdCampaign = async (
  id: number,
  postIntegrationsFacebookIdCampaignBody: PostIntegrationsFacebookIdCampaignBody,
  options?: RequestInit,
): Promise<postIntegrationsFacebookIdCampaignResponse> => {
  return fetcher<postIntegrationsFacebookIdCampaignResponse>(
    getPostIntegrationsFacebookIdCampaignUrl(id),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(postIntegrationsFacebookIdCampaignBody),
    },
  );
};

/**
 * Dissociates campaign
 * @summary Dissociate campaign
 */
export type deleteIntegrationsFacebookIdCampaignResponse200 = {
  data: void;
  status: 200;
};

export type deleteIntegrationsFacebookIdCampaignResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type deleteIntegrationsFacebookIdCampaignResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type deleteIntegrationsFacebookIdCampaignResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type deleteIntegrationsFacebookIdCampaignResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type deleteIntegrationsFacebookIdCampaignResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type deleteIntegrationsFacebookIdCampaignResponseComposite =
  | deleteIntegrationsFacebookIdCampaignResponse200
  | deleteIntegrationsFacebookIdCampaignResponse400
  | deleteIntegrationsFacebookIdCampaignResponse401
  | deleteIntegrationsFacebookIdCampaignResponse402
  | deleteIntegrationsFacebookIdCampaignResponse406
  | deleteIntegrationsFacebookIdCampaignResponse500;

export type deleteIntegrationsFacebookIdCampaignResponse =
  deleteIntegrationsFacebookIdCampaignResponseComposite & {
    headers: Headers;
  };

export const getDeleteIntegrationsFacebookIdCampaignUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/integrations/facebook/${id}/campaign`;
};

export const deleteIntegrationsFacebookIdCampaign = async (
  id: number,
  deleteIntegrationsFacebookIdCampaignBody: DeleteIntegrationsFacebookIdCampaignBody,
  options?: RequestInit,
): Promise<deleteIntegrationsFacebookIdCampaignResponse> => {
  return fetcher<deleteIntegrationsFacebookIdCampaignResponse>(
    getDeleteIntegrationsFacebookIdCampaignUrl(id),
    {
      ...options,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(deleteIntegrationsFacebookIdCampaignBody),
    },
  );
};
