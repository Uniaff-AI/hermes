/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keitaro Admin API
 * OpenAPI spec version: v1
 */
import { z as zod } from 'zod';

import { fetcher } from '../../../utils/fetcher';

/**
 * Returns list of Facebook integrations
 * @summary Get Facebook integrations
 */
export const getIntegrationsFacebookResponse = zod.object({
  data: zod
    .array(
      zod.object({
        id: zod.number().optional().describe('Intergration ID'),
        integration: zod.string().optional().describe('The integration name'),
        proxy_enabled: zod.boolean().optional().describe('Use proxy'),
        name: zod.string().optional().describe('The integration name'),
        ad_account_id: zod.string().optional().describe('Facebook account ID'),
        token: zod.string().optional().describe('Facebook token'),
        last_error: zod.string().optional().describe('Last error'),
        last_raw_error: zod
          .string()
          .optional()
          .describe('Error message from facebook'),
        proxy: zod
          .object({
            protocol: zod
              .enum(['http', 'https', 'socks5'])
              .optional()
              .describe('Protocol'),
            address: zod.string().optional().describe('Proxy address'),
            port: zod.number().optional().describe('Proxy port'),
            login: zod.string().optional().describe('Proxy login'),
            password: zod.string().optional().describe('Proxy password'),
          })
          .optional(),
      })
    )
    .optional(),
});

/**
 * Creates Facebook integration.
 * @summary Create Facebook Integration
 */
export const postIntegrationsFacebookBody = zod.object({
  name: zod.string().optional().describe('The integration name'),
  ad_account_id: zod.string().optional().describe('Facebook account ID'),
  token: zod.string().optional().describe('Facebook yoken'),
  proxy_enabled: zod.boolean().optional().describe('Use proxy to connect'),
  proxy: zod
    .object({
      protocol: zod
        .enum(['http', 'https', 'socks5'])
        .optional()
        .describe('Protocol'),
      address: zod.string().optional().describe('Proxy address'),
      port: zod.number().optional().describe('Proxy port'),
      login: zod.string().optional().describe('Proxy login'),
      password: zod.string().optional().describe('Proxy password'),
    })
    .optional(),
});

export const postIntegrationsFacebookResponse = zod.object({
  id: zod.number().optional().describe('Intergration ID'),
  integration: zod.string().optional().describe('The integration name'),
  proxy_enabled: zod.boolean().optional().describe('Use proxy'),
  name: zod.string().optional().describe('The integration name'),
  ad_account_id: zod.string().optional().describe('Facebook account ID'),
  token: zod.string().optional().describe('Facebook token'),
  last_error: zod.string().optional().describe('Last error'),
  last_raw_error: zod
    .string()
    .optional()
    .describe('Error message from facebook'),
  proxy: zod
    .object({
      protocol: zod
        .enum(['http', 'https', 'socks5'])
        .optional()
        .describe('Protocol'),
      address: zod.string().optional().describe('Proxy address'),
      port: zod.number().optional().describe('Proxy port'),
      login: zod.string().optional().describe('Proxy login'),
      password: zod.string().optional().describe('Proxy password'),
    })
    .optional(),
});

/**
 * Returns Facebook integration details
 * @summary Get Facebook integration
 */
export const getIntegrationsFacebookIdParams = zod.object({
  id: zod.number().describe('Integration ID'),
});

export const getIntegrationsFacebookIdResponse = zod.object({
  data: zod
    .object({
      id: zod.number().optional().describe('Intergration ID'),
      integration: zod.string().optional().describe('The integration name'),
      proxy_enabled: zod.boolean().optional().describe('Use proxy'),
      name: zod.string().optional().describe('The integration name'),
      ad_account_id: zod.string().optional().describe('Facebook account ID'),
      token: zod.string().optional().describe('Facebook token'),
      last_error: zod.string().optional().describe('Last error'),
      last_raw_error: zod
        .string()
        .optional()
        .describe('Error message from facebook'),
      proxy: zod
        .object({
          protocol: zod
            .enum(['http', 'https', 'socks5'])
            .optional()
            .describe('Protocol'),
          address: zod.string().optional().describe('Proxy address'),
          port: zod.number().optional().describe('Proxy port'),
          login: zod.string().optional().describe('Proxy login'),
          password: zod.string().optional().describe('Proxy password'),
        })
        .optional(),
    })
    .optional(),
});

/**
 * Updates Facebook integration.
 * @summary Update Facebook integration
 */
export const putIntegrationsFacebookIdParams = zod.object({
  id: zod.number().describe('Integration ID'),
});

export const putIntegrationsFacebookIdBody = zod.object({
  name: zod.string().optional().describe('The integration name'),
  ad_account_id: zod.string().optional().describe('Facebook account ID'),
  token: zod.string().optional().describe('Facebook yoken'),
  proxy_enabled: zod.boolean().optional().describe('Use proxy to connect'),
  proxy: zod
    .object({
      protocol: zod
        .enum(['http', 'https', 'socks5'])
        .optional()
        .describe('Protocol'),
      address: zod.string().optional().describe('Proxy address'),
      port: zod.number().optional().describe('Proxy port'),
      login: zod.string().optional().describe('Proxy login'),
      password: zod.string().optional().describe('Proxy password'),
    })
    .optional(),
});

export const putIntegrationsFacebookIdResponse = zod.object({
  data: zod
    .object({
      id: zod.number().optional().describe('Intergration ID'),
      integration: zod.string().optional().describe('The integration name'),
      proxy_enabled: zod.boolean().optional().describe('Use proxy'),
      name: zod.string().optional().describe('The integration name'),
      ad_account_id: zod.string().optional().describe('Facebook account ID'),
      token: zod.string().optional().describe('Facebook token'),
      last_error: zod.string().optional().describe('Last error'),
      last_raw_error: zod
        .string()
        .optional()
        .describe('Error message from facebook'),
      proxy: zod
        .object({
          protocol: zod
            .enum(['http', 'https', 'socks5'])
            .optional()
            .describe('Protocol'),
          address: zod.string().optional().describe('Proxy address'),
          port: zod.number().optional().describe('Proxy port'),
          login: zod.string().optional().describe('Proxy login'),
          password: zod.string().optional().describe('Proxy password'),
        })
        .optional(),
    })
    .optional(),
});

/**
 * Delete Facebook integration
 * @summary Delete Facebook integration
 */
export const deleteIntegrationsFacebookIdParams = zod.object({
  id: zod.number().describe('Integration ID'),
});

export const deleteIntegrationsFacebookIdResponse = zod.object({
  success: zod.boolean().optional(),
});

/**
 * Returns list of assigned campaigns.
 * @summary Get assigned campaigns.
 */
export const getIntegrationsFacebookIdCampaignParams = zod.object({
  id: zod.number().describe('Integration ID'),
});

export const getIntegrationsFacebookIdCampaignResponseItem = zod.object({
  name: zod.string(),
  value: zod.number(),
});
export const getIntegrationsFacebookIdCampaignResponse = zod.array(
  getIntegrationsFacebookIdCampaignResponseItem
);

/**
 * Assigns FB integration to campaigns.
 * @summary Assign to campaign
 */
export const postIntegrationsFacebookIdCampaignParams = zod.object({
  id: zod.number().describe('Integration ID'),
});

export const postIntegrationsFacebookIdCampaignBody = zod.object({
  campaign_id: zod.number().describe('Campaign ID'),
});

/**
 * Dissociates campaign
 * @summary Dissociate campaign
 */
export const deleteIntegrationsFacebookIdCampaignParams = zod.object({
  id: zod.number().describe('Integration ID'),
});

export const deleteIntegrationsFacebookIdCampaignBody = zod.object({
  campaign_id: zod.number().describe('Campaign ID'),
});
