/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Keitaro Admin API
 * OpenAPI spec version: v1
 */
import type {
  AffiliateNetwork,
  AffiliateNetworkObject,
  AffiliateNetworkRequest,
  BadRequestResponse,
  InternalErrorResponse,
  NotAcceptableResponse,
  NotFoundResponse,
  PaymentRequiredResponse,
  UnauthorizedResponse,
} from '../../models';

import { fetcher } from '../../../utils/fetcher';

/**
 * Returns a list all affiliate networks.
 * @summary List all affiliate networks
 */
export type getAffiliateNetworksResponse200 = {
  data: AffiliateNetwork[];
  status: 200;
};

export type getAffiliateNetworksResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getAffiliateNetworksResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getAffiliateNetworksResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getAffiliateNetworksResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getAffiliateNetworksResponseComposite =
  | getAffiliateNetworksResponse200
  | getAffiliateNetworksResponse400
  | getAffiliateNetworksResponse401
  | getAffiliateNetworksResponse402
  | getAffiliateNetworksResponse500;

export type getAffiliateNetworksResponse =
  getAffiliateNetworksResponseComposite & {
    headers: Headers;
  };

export const getGetAffiliateNetworksUrl = () => {
  return `https://admin-api.docs.keitaro.io/affiliate_networks`;
};

export const getAffiliateNetworks = async (
  options?: RequestInit,
): Promise<getAffiliateNetworksResponse> => {
  return fetcher<getAffiliateNetworksResponse>(getGetAffiliateNetworksUrl(), {
    ...options,
    method: 'GET',
  });
};

/**
 * Create an affiliate network
 * @summary Create an affiliate network
 */
export type postAffiliateNetworksResponse200 = {
  data: AffiliateNetwork;
  status: 200;
};

export type postAffiliateNetworksResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postAffiliateNetworksResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postAffiliateNetworksResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postAffiliateNetworksResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postAffiliateNetworksResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postAffiliateNetworksResponseComposite =
  | postAffiliateNetworksResponse200
  | postAffiliateNetworksResponse400
  | postAffiliateNetworksResponse401
  | postAffiliateNetworksResponse402
  | postAffiliateNetworksResponse406
  | postAffiliateNetworksResponse500;

export type postAffiliateNetworksResponse =
  postAffiliateNetworksResponseComposite & {
    headers: Headers;
  };

export const getPostAffiliateNetworksUrl = () => {
  return `https://admin-api.docs.keitaro.io/affiliate_networks`;
};

export const postAffiliateNetworks = async (
  affiliateNetworkRequest: AffiliateNetworkRequest,
  options?: RequestInit,
): Promise<postAffiliateNetworksResponse> => {
  return fetcher<postAffiliateNetworksResponse>(getPostAffiliateNetworksUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(affiliateNetworkRequest),
  });
};

/**
 * Retrieve affiliate metwork details
 * @summary Retrieve Affiliate network details
 */
export type getAffiliateNetworksIdResponse200 = {
  data: AffiliateNetwork;
  status: 200;
};

export type getAffiliateNetworksIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getAffiliateNetworksIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getAffiliateNetworksIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getAffiliateNetworksIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type getAffiliateNetworksIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getAffiliateNetworksIdResponseComposite =
  | getAffiliateNetworksIdResponse200
  | getAffiliateNetworksIdResponse400
  | getAffiliateNetworksIdResponse401
  | getAffiliateNetworksIdResponse402
  | getAffiliateNetworksIdResponse404
  | getAffiliateNetworksIdResponse500;

export type getAffiliateNetworksIdResponse =
  getAffiliateNetworksIdResponseComposite & {
    headers: Headers;
  };

export const getGetAffiliateNetworksIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/affiliate_networks/${id}`;
};

export const getAffiliateNetworksId = async (
  id: number,
  options?: RequestInit,
): Promise<getAffiliateNetworksIdResponse> => {
  return fetcher<getAffiliateNetworksIdResponse>(
    getGetAffiliateNetworksIdUrl(id),
    {
      ...options,
      method: 'GET',
    },
  );
};

/**
 * Update an Affiliate network
 * @summary Update Affiliate network
 */
export type putAffiliateNetworksIdResponse200 = {
  data: AffiliateNetwork;
  status: 200;
};

export type putAffiliateNetworksIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type putAffiliateNetworksIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type putAffiliateNetworksIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type putAffiliateNetworksIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type putAffiliateNetworksIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type putAffiliateNetworksIdResponseComposite =
  | putAffiliateNetworksIdResponse200
  | putAffiliateNetworksIdResponse400
  | putAffiliateNetworksIdResponse401
  | putAffiliateNetworksIdResponse402
  | putAffiliateNetworksIdResponse404
  | putAffiliateNetworksIdResponse500;

export type putAffiliateNetworksIdResponse =
  putAffiliateNetworksIdResponseComposite & {
    headers: Headers;
  };

export const getPutAffiliateNetworksIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/affiliate_networks/${id}`;
};

export const putAffiliateNetworksId = async (
  id: number,
  affiliateNetworkObject: AffiliateNetworkObject,
  options?: RequestInit,
): Promise<putAffiliateNetworksIdResponse> => {
  return fetcher<putAffiliateNetworksIdResponse>(
    getPutAffiliateNetworksIdUrl(id),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(affiliateNetworkObject),
    },
  );
};

/**
 * Move affiliate network to the archive
 * @summary Move affiliate network to the archive
 */
export type deleteAffiliateNetworksIdResponse200 = {
  data: AffiliateNetwork;
  status: 200;
};

export type deleteAffiliateNetworksIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type deleteAffiliateNetworksIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type deleteAffiliateNetworksIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type deleteAffiliateNetworksIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type deleteAffiliateNetworksIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type deleteAffiliateNetworksIdResponseComposite =
  | deleteAffiliateNetworksIdResponse200
  | deleteAffiliateNetworksIdResponse400
  | deleteAffiliateNetworksIdResponse401
  | deleteAffiliateNetworksIdResponse402
  | deleteAffiliateNetworksIdResponse404
  | deleteAffiliateNetworksIdResponse500;

export type deleteAffiliateNetworksIdResponse =
  deleteAffiliateNetworksIdResponseComposite & {
    headers: Headers;
  };

export const getDeleteAffiliateNetworksIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/affiliate_networks/${id}`;
};

export const deleteAffiliateNetworksId = async (
  id: number,
  options?: RequestInit,
): Promise<deleteAffiliateNetworksIdResponse> => {
  return fetcher<deleteAffiliateNetworksIdResponse>(
    getDeleteAffiliateNetworksIdUrl(id),
    {
      ...options,
      method: 'DELETE',
    },
  );
};

/**
 * Clone affiliate network
 * @summary Clone affiliate network
 */
export type postAffiliateNetworksIdCloneResponse200 = {
  data: AffiliateNetwork;
  status: 200;
};

export type postAffiliateNetworksIdCloneResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postAffiliateNetworksIdCloneResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postAffiliateNetworksIdCloneResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postAffiliateNetworksIdCloneResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postAffiliateNetworksIdCloneResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postAffiliateNetworksIdCloneResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postAffiliateNetworksIdCloneResponseComposite =
  | postAffiliateNetworksIdCloneResponse200
  | postAffiliateNetworksIdCloneResponse400
  | postAffiliateNetworksIdCloneResponse401
  | postAffiliateNetworksIdCloneResponse402
  | postAffiliateNetworksIdCloneResponse404
  | postAffiliateNetworksIdCloneResponse406
  | postAffiliateNetworksIdCloneResponse500;

export type postAffiliateNetworksIdCloneResponse =
  postAffiliateNetworksIdCloneResponseComposite & {
    headers: Headers;
  };

export const getPostAffiliateNetworksIdCloneUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/affiliate_networks/${id}/clone`;
};

export const postAffiliateNetworksIdClone = async (
  id: number,
  options?: RequestInit,
): Promise<postAffiliateNetworksIdCloneResponse> => {
  return fetcher<postAffiliateNetworksIdCloneResponse>(
    getPostAffiliateNetworksIdCloneUrl(id),
    {
      ...options,
      method: 'POST',
    },
  );
};

/**
 * Restore a affiliate network
 * @summary Restore affiliate network
 */
export type postAffiliateNetworksIdRestoreResponse201 = {
  data: AffiliateNetwork;
  status: 201;
};

export type postAffiliateNetworksIdRestoreResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postAffiliateNetworksIdRestoreResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postAffiliateNetworksIdRestoreResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postAffiliateNetworksIdRestoreResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postAffiliateNetworksIdRestoreResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postAffiliateNetworksIdRestoreResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postAffiliateNetworksIdRestoreResponseComposite =
  | postAffiliateNetworksIdRestoreResponse201
  | postAffiliateNetworksIdRestoreResponse400
  | postAffiliateNetworksIdRestoreResponse401
  | postAffiliateNetworksIdRestoreResponse402
  | postAffiliateNetworksIdRestoreResponse404
  | postAffiliateNetworksIdRestoreResponse406
  | postAffiliateNetworksIdRestoreResponse500;

export type postAffiliateNetworksIdRestoreResponse =
  postAffiliateNetworksIdRestoreResponseComposite & {
    headers: Headers;
  };

export const getPostAffiliateNetworksIdRestoreUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/affiliate_networks/${id}/restore`;
};

export const postAffiliateNetworksIdRestore = async (
  id: number,
  options?: RequestInit,
): Promise<postAffiliateNetworksIdRestoreResponse> => {
  return fetcher<postAffiliateNetworksIdRestoreResponse>(
    getPostAffiliateNetworksIdRestoreUrl(id),
    {
      ...options,
      method: 'POST',
    },
  );
};

/**
 * Clean archive
 * @summary Clean archive
 */
export type postAffiliateNetworksCleanArchiveResponse200 = {
  data: void;
  status: 200;
};

export type postAffiliateNetworksCleanArchiveResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postAffiliateNetworksCleanArchiveResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postAffiliateNetworksCleanArchiveResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postAffiliateNetworksCleanArchiveResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postAffiliateNetworksCleanArchiveResponseComposite =
  | postAffiliateNetworksCleanArchiveResponse200
  | postAffiliateNetworksCleanArchiveResponse400
  | postAffiliateNetworksCleanArchiveResponse401
  | postAffiliateNetworksCleanArchiveResponse402
  | postAffiliateNetworksCleanArchiveResponse500;

export type postAffiliateNetworksCleanArchiveResponse =
  postAffiliateNetworksCleanArchiveResponseComposite & {
    headers: Headers;
  };

export const getPostAffiliateNetworksCleanArchiveUrl = () => {
  return `https://admin-api.docs.keitaro.io/affiliate_networks/clean_archive`;
};

export const postAffiliateNetworksCleanArchive = async (
  options?: RequestInit,
): Promise<postAffiliateNetworksCleanArchiveResponse> => {
  return fetcher<postAffiliateNetworksCleanArchiveResponse>(
    getPostAffiliateNetworksCleanArchiveUrl(),
    {
      ...options,
      method: 'POST',
    },
  );
};

/**
 * Get deleted affiliate networks
 * @summary Get deleted affiliate networks
 */
export type getAffiliateNetworksDeletedResponse200 = {
  data: AffiliateNetwork[];
  status: 200;
};

export type getAffiliateNetworksDeletedResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getAffiliateNetworksDeletedResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getAffiliateNetworksDeletedResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getAffiliateNetworksDeletedResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getAffiliateNetworksDeletedResponseComposite =
  | getAffiliateNetworksDeletedResponse200
  | getAffiliateNetworksDeletedResponse400
  | getAffiliateNetworksDeletedResponse401
  | getAffiliateNetworksDeletedResponse402
  | getAffiliateNetworksDeletedResponse500;

export type getAffiliateNetworksDeletedResponse =
  getAffiliateNetworksDeletedResponseComposite & {
    headers: Headers;
  };

export const getGetAffiliateNetworksDeletedUrl = () => {
  return `https://admin-api.docs.keitaro.io/affiliate_networks/deleted`;
};

export const getAffiliateNetworksDeleted = async (
  options?: RequestInit,
): Promise<getAffiliateNetworksDeletedResponse> => {
  return fetcher<getAffiliateNetworksDeletedResponse>(
    getGetAffiliateNetworksDeletedUrl(),
    {
      ...options,
      method: 'GET',
    },
  );
};
