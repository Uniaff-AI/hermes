/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Keitaro Admin API
 * OpenAPI spec version: v1
 */
import type {
  BadRequestResponse,
  GetStreamsSearchParams,
  InternalErrorResponse,
  NotAcceptableResponse,
  NotFoundResponse,
  PaymentRequiredResponse,
  Stream,
  StreamAction,
  StreamFilter,
  StreamObject,
  StreamRequest,
  UnauthorizedResponse,
} from '../../models';

import { fetcher } from '../../../utils/fetcher';

/**
 * Returns campaign flows
 * @summary Get flows
 */
export type getCampaignsIdStreamsResponse200 = {
  data: Stream[];
  status: 200;
};

export type getCampaignsIdStreamsResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getCampaignsIdStreamsResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getCampaignsIdStreamsResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getCampaignsIdStreamsResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type getCampaignsIdStreamsResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getCampaignsIdStreamsResponseComposite =
  | getCampaignsIdStreamsResponse200
  | getCampaignsIdStreamsResponse400
  | getCampaignsIdStreamsResponse401
  | getCampaignsIdStreamsResponse402
  | getCampaignsIdStreamsResponse404
  | getCampaignsIdStreamsResponse500;

export type getCampaignsIdStreamsResponse =
  getCampaignsIdStreamsResponseComposite & {
    headers: Headers;
  };

export const getGetCampaignsIdStreamsUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/campaigns/${id}/streams`;
};

export const getCampaignsIdStreams = async (
  id: number,
  options?: RequestInit,
): Promise<getCampaignsIdStreamsResponse> => {
  return fetcher<getCampaignsIdStreamsResponse>(
    getGetCampaignsIdStreamsUrl(id),
    {
      ...options,
      method: 'GET',
    },
  );
};

/**
 * Returns list of available flow filters
 * @summary Get available flow filters
 */
export type getStreamFiltersResponse200 = {
  data: StreamFilter[];
  status: 200;
};

export type getStreamFiltersResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getStreamFiltersResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getStreamFiltersResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getStreamFiltersResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getStreamFiltersResponseComposite =
  | getStreamFiltersResponse200
  | getStreamFiltersResponse400
  | getStreamFiltersResponse401
  | getStreamFiltersResponse402
  | getStreamFiltersResponse500;

export type getStreamFiltersResponse = getStreamFiltersResponseComposite & {
  headers: Headers;
};

export const getGetStreamFiltersUrl = () => {
  return `https://admin-api.docs.keitaro.io/stream_filters`;
};

export const getStreamFilters = async (
  options?: RequestInit,
): Promise<getStreamFiltersResponse> => {
  return fetcher<getStreamFiltersResponse>(getGetStreamFiltersUrl(), {
    ...options,
    method: 'GET',
  });
};

/**
 * Returns list of available flow schemas
 * @summary Get available flow schemas
 */
export type getStreamSchemasResponse200 = {
  data: StreamAction[];
  status: 200;
};

export type getStreamSchemasResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getStreamSchemasResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getStreamSchemasResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getStreamSchemasResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getStreamSchemasResponseComposite =
  | getStreamSchemasResponse200
  | getStreamSchemasResponse400
  | getStreamSchemasResponse401
  | getStreamSchemasResponse402
  | getStreamSchemasResponse500;

export type getStreamSchemasResponse = getStreamSchemasResponseComposite & {
  headers: Headers;
};

export const getGetStreamSchemasUrl = () => {
  return `https://admin-api.docs.keitaro.io/stream_schemas`;
};

export const getStreamSchemas = async (
  options?: RequestInit,
): Promise<getStreamSchemasResponse> => {
  return fetcher<getStreamSchemasResponse>(getGetStreamSchemasUrl(), {
    ...options,
    method: 'GET',
  });
};

/**
 * Returns list of flow types
 * @summary Get list of flows types
 */
export type getStreamTypesResponse200 = {
  data: StreamAction[];
  status: 200;
};

export type getStreamTypesResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getStreamTypesResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getStreamTypesResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getStreamTypesResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getStreamTypesResponseComposite =
  | getStreamTypesResponse200
  | getStreamTypesResponse400
  | getStreamTypesResponse401
  | getStreamTypesResponse402
  | getStreamTypesResponse500;

export type getStreamTypesResponse = getStreamTypesResponseComposite & {
  headers: Headers;
};

export const getGetStreamTypesUrl = () => {
  return `https://admin-api.docs.keitaro.io/stream_types`;
};

export const getStreamTypes = async (
  options?: RequestInit,
): Promise<getStreamTypesResponse> => {
  return fetcher<getStreamTypesResponse>(getGetStreamTypesUrl(), {
    ...options,
    method: 'GET',
  });
};

/**
 * Returns list of the events.
 * @summary Get flow events
 */
export type getStreamIdEventsResponse200 = {
  data: Stream;
  status: 200;
};

export type getStreamIdEventsResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getStreamIdEventsResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getStreamIdEventsResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getStreamIdEventsResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type getStreamIdEventsResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getStreamIdEventsResponseComposite =
  | getStreamIdEventsResponse200
  | getStreamIdEventsResponse400
  | getStreamIdEventsResponse401
  | getStreamIdEventsResponse402
  | getStreamIdEventsResponse404
  | getStreamIdEventsResponse500;

export type getStreamIdEventsResponse = getStreamIdEventsResponseComposite & {
  headers: Headers;
};

export const getGetStreamIdEventsUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/stream/${id}/events`;
};

export const getStreamIdEvents = async (
  id: number,
  options?: RequestInit,
): Promise<getStreamIdEventsResponse> => {
  return fetcher<getStreamIdEventsResponse>(getGetStreamIdEventsUrl(id), {
    ...options,
    method: 'GET',
  });
};

/**
 * Returns available flow actions
 * @summary Get available flows actions
 */
export type getStreamsActionsResponse200 = {
  data: StreamAction[];
  status: 200;
};

export type getStreamsActionsResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getStreamsActionsResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getStreamsActionsResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getStreamsActionsResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getStreamsActionsResponseComposite =
  | getStreamsActionsResponse200
  | getStreamsActionsResponse400
  | getStreamsActionsResponse401
  | getStreamsActionsResponse402
  | getStreamsActionsResponse500;

export type getStreamsActionsResponse = getStreamsActionsResponseComposite & {
  headers: Headers;
};

export const getGetStreamsActionsUrl = () => {
  return `https://admin-api.docs.keitaro.io/streams_actions`;
};

export const getStreamsActions = async (
  options?: RequestInit,
): Promise<getStreamsActionsResponse> => {
  return fetcher<getStreamsActionsResponse>(getGetStreamsActionsUrl(), {
    ...options,
    method: 'GET',
  });
};

/**
 * Creates flow
 * @summary Create flow
 */
export type postStreamsResponse200 = {
  data: Stream;
  status: 200;
};

export type postStreamsResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postStreamsResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postStreamsResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postStreamsResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postStreamsResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postStreamsResponseComposite =
  | postStreamsResponse200
  | postStreamsResponse400
  | postStreamsResponse401
  | postStreamsResponse402
  | postStreamsResponse406
  | postStreamsResponse500;

export type postStreamsResponse = postStreamsResponseComposite & {
  headers: Headers;
};

export const getPostStreamsUrl = () => {
  return `https://admin-api.docs.keitaro.io/streams`;
};

export const postStreams = async (
  streamRequest: StreamRequest,
  options?: RequestInit,
): Promise<postStreamsResponse> => {
  return fetcher<postStreamsResponse>(getPostStreamsUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(streamRequest),
  });
};

/**
 * Returns flow details.
 * @summary Get flow
 */
export type getStreamsIdResponse200 = {
  data: Stream;
  status: 200;
};

export type getStreamsIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getStreamsIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getStreamsIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getStreamsIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type getStreamsIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getStreamsIdResponseComposite =
  | getStreamsIdResponse200
  | getStreamsIdResponse400
  | getStreamsIdResponse401
  | getStreamsIdResponse402
  | getStreamsIdResponse404
  | getStreamsIdResponse500;

export type getStreamsIdResponse = getStreamsIdResponseComposite & {
  headers: Headers;
};

export const getGetStreamsIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/streams/${id}`;
};

export const getStreamsId = async (
  id: number,
  options?: RequestInit,
): Promise<getStreamsIdResponse> => {
  return fetcher<getStreamsIdResponse>(getGetStreamsIdUrl(id), {
    ...options,
    method: 'GET',
  });
};

/**
 * Updates flow.
 * @summary Update flow
 */
export type putStreamsIdResponse200 = {
  data: Stream;
  status: 200;
};

export type putStreamsIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type putStreamsIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type putStreamsIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type putStreamsIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type putStreamsIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type putStreamsIdResponseComposite =
  | putStreamsIdResponse200
  | putStreamsIdResponse400
  | putStreamsIdResponse401
  | putStreamsIdResponse402
  | putStreamsIdResponse404
  | putStreamsIdResponse500;

export type putStreamsIdResponse = putStreamsIdResponseComposite & {
  headers: Headers;
};

export const getPutStreamsIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/streams/${id}`;
};

export const putStreamsId = async (
  id: number,
  streamObject: StreamObject,
  options?: RequestInit,
): Promise<putStreamsIdResponse> => {
  return fetcher<putStreamsIdResponse>(getPutStreamsIdUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(streamObject),
  });
};

/**
 * Moves strema to the archive
 * @summary Delete flow
 */
export type deleteStreamsIdResponse200 = {
  data: Stream;
  status: 200;
};

export type deleteStreamsIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type deleteStreamsIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type deleteStreamsIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type deleteStreamsIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type deleteStreamsIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type deleteStreamsIdResponseComposite =
  | deleteStreamsIdResponse200
  | deleteStreamsIdResponse400
  | deleteStreamsIdResponse401
  | deleteStreamsIdResponse402
  | deleteStreamsIdResponse404
  | deleteStreamsIdResponse500;

export type deleteStreamsIdResponse = deleteStreamsIdResponseComposite & {
  headers: Headers;
};

export const getDeleteStreamsIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/streams/${id}`;
};

export const deleteStreamsId = async (
  id: number,
  options?: RequestInit,
): Promise<deleteStreamsIdResponse> => {
  return fetcher<deleteStreamsIdResponse>(getDeleteStreamsIdUrl(id), {
    ...options,
    method: 'DELETE',
  });
};

/**
 * Changes the state to 'disabled'
 * @summary Disable flow
 */
export type postStreamsIdDisableResponse200 = {
  data: Stream;
  status: 200;
};

export type postStreamsIdDisableResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postStreamsIdDisableResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postStreamsIdDisableResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postStreamsIdDisableResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postStreamsIdDisableResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postStreamsIdDisableResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postStreamsIdDisableResponseComposite =
  | postStreamsIdDisableResponse200
  | postStreamsIdDisableResponse400
  | postStreamsIdDisableResponse401
  | postStreamsIdDisableResponse402
  | postStreamsIdDisableResponse404
  | postStreamsIdDisableResponse406
  | postStreamsIdDisableResponse500;

export type postStreamsIdDisableResponse =
  postStreamsIdDisableResponseComposite & {
    headers: Headers;
  };

export const getPostStreamsIdDisableUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/streams/${id}/disable`;
};

export const postStreamsIdDisable = async (
  id: number,
  options?: RequestInit,
): Promise<postStreamsIdDisableResponse> => {
  return fetcher<postStreamsIdDisableResponse>(getPostStreamsIdDisableUrl(id), {
    ...options,
    method: 'POST',
  });
};

/**
 * Changes the state to 'active'.
 * @summary Enable flow
 */
export type postStreamsIdEnableResponse200 = {
  data: Stream;
  status: 200;
};

export type postStreamsIdEnableResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postStreamsIdEnableResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postStreamsIdEnableResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postStreamsIdEnableResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postStreamsIdEnableResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postStreamsIdEnableResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postStreamsIdEnableResponseComposite =
  | postStreamsIdEnableResponse200
  | postStreamsIdEnableResponse400
  | postStreamsIdEnableResponse401
  | postStreamsIdEnableResponse402
  | postStreamsIdEnableResponse404
  | postStreamsIdEnableResponse406
  | postStreamsIdEnableResponse500;

export type postStreamsIdEnableResponse =
  postStreamsIdEnableResponseComposite & {
    headers: Headers;
  };

export const getPostStreamsIdEnableUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/streams/${id}/enable`;
};

export const postStreamsIdEnable = async (
  id: number,
  options?: RequestInit,
): Promise<postStreamsIdEnableResponse> => {
  return fetcher<postStreamsIdEnableResponse>(getPostStreamsIdEnableUrl(id), {
    ...options,
    method: 'POST',
  });
};

/**
 * Restore an Archived Flow
 * @summary Restore an Archived Flow
 */
export type postStreamsIdRestoreResponse200 = {
  data: Stream;
  status: 200;
};

export type postStreamsIdRestoreResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postStreamsIdRestoreResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postStreamsIdRestoreResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postStreamsIdRestoreResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postStreamsIdRestoreResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postStreamsIdRestoreResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postStreamsIdRestoreResponseComposite =
  | postStreamsIdRestoreResponse200
  | postStreamsIdRestoreResponse400
  | postStreamsIdRestoreResponse401
  | postStreamsIdRestoreResponse402
  | postStreamsIdRestoreResponse404
  | postStreamsIdRestoreResponse406
  | postStreamsIdRestoreResponse500;

export type postStreamsIdRestoreResponse =
  postStreamsIdRestoreResponseComposite & {
    headers: Headers;
  };

export const getPostStreamsIdRestoreUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/streams/${id}/restore`;
};

export const postStreamsIdRestore = async (
  id: number,
  options?: RequestInit,
): Promise<postStreamsIdRestoreResponse> => {
  return fetcher<postStreamsIdRestoreResponse>(getPostStreamsIdRestoreUrl(id), {
    ...options,
    method: 'POST',
  });
};

/**
 * Clean archive
 * @summary Clean archive
 */
export type postStreamsCleanArchiveResponse200 = {
  data: void;
  status: 200;
};

export type postStreamsCleanArchiveResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postStreamsCleanArchiveResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postStreamsCleanArchiveResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postStreamsCleanArchiveResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postStreamsCleanArchiveResponseComposite =
  | postStreamsCleanArchiveResponse200
  | postStreamsCleanArchiveResponse400
  | postStreamsCleanArchiveResponse401
  | postStreamsCleanArchiveResponse402
  | postStreamsCleanArchiveResponse500;

export type postStreamsCleanArchiveResponse =
  postStreamsCleanArchiveResponseComposite & {
    headers: Headers;
  };

export const getPostStreamsCleanArchiveUrl = () => {
  return `https://admin-api.docs.keitaro.io/streams/clean_archive`;
};

export const postStreamsCleanArchive = async (
  options?: RequestInit,
): Promise<postStreamsCleanArchiveResponse> => {
  return fetcher<postStreamsCleanArchiveResponse>(
    getPostStreamsCleanArchiveUrl(),
    {
      ...options,
      method: 'POST',
    },
  );
};

/**
 * Returns deleted flows
 * @summary Get deleted flows
 */
export type getStreamsDeletedResponse200 = {
  data: Stream[];
  status: 200;
};

export type getStreamsDeletedResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getStreamsDeletedResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getStreamsDeletedResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getStreamsDeletedResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getStreamsDeletedResponseComposite =
  | getStreamsDeletedResponse200
  | getStreamsDeletedResponse400
  | getStreamsDeletedResponse401
  | getStreamsDeletedResponse402
  | getStreamsDeletedResponse500;

export type getStreamsDeletedResponse = getStreamsDeletedResponseComposite & {
  headers: Headers;
};

export const getGetStreamsDeletedUrl = () => {
  return `https://admin-api.docs.keitaro.io/streams/deleted`;
};

export const getStreamsDeleted = async (
  options?: RequestInit,
): Promise<getStreamsDeletedResponse> => {
  return fetcher<getStreamsDeletedResponse>(getGetStreamsDeletedUrl(), {
    ...options,
    method: 'GET',
  });
};

/**
 * Searching in flows
 * @summary Search in flows
 */
export type getStreamsSearchResponse200 = {
  data: Stream[];
  status: 200;
};

export type getStreamsSearchResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getStreamsSearchResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getStreamsSearchResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getStreamsSearchResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getStreamsSearchResponseComposite =
  | getStreamsSearchResponse200
  | getStreamsSearchResponse400
  | getStreamsSearchResponse401
  | getStreamsSearchResponse402
  | getStreamsSearchResponse500;

export type getStreamsSearchResponse = getStreamsSearchResponseComposite & {
  headers: Headers;
};

export const getGetStreamsSearchUrl = (params: GetStreamsSearchParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://admin-api.docs.keitaro.io/streams/search?${stringifiedParams}`
    : `https://admin-api.docs.keitaro.io/streams/search`;
};

export const getStreamsSearch = async (
  params: GetStreamsSearchParams,
  options?: RequestInit,
): Promise<getStreamsSearchResponse> => {
  return fetcher<getStreamsSearchResponse>(getGetStreamsSearchUrl(params), {
    ...options,
    method: 'GET',
  });
};
