/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keitaro Admin API
 * OpenAPI spec version: v1
 */
import { z as zod } from 'zod';

import { fetcher } from '../../../utils/fetcher';

/**
 * Returns campaign flows
 * @summary Get flows
 */
export const getCampaignsIdStreamsParams = zod.object({
  id: zod.number().describe('Campaign ID'),
});

export const getCampaignsIdStreamsResponseOfferSelectionDefault =
  'before_click';

export const getCampaignsIdStreamsResponseItem = zod.object({
  id: zod.number().optional(),
  type: zod.string().optional(),
  name: zod.string().optional(),
  campaign_id: zod.number().optional(),
  position: zod.number().optional(),
  weight: zod.number().optional(),
  action_options: zod.object({}).optional(),
  comments: zod.string().optional(),
  state: zod.string().optional(),
  updated_at: zod.string().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  schema: zod.string().optional(),
  collect_clicks: zod.boolean().optional(),
  filter_or: zod.boolean().optional(),
  filters: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        name: zod.string().optional(),
        mode: zod.string().optional(),
        payload: zod.string().optional(),
        oid: zod.string().optional(),
      }),
    )
    .optional(),
  triggers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        oid: zod.number().optional(),
        stream_id: zod.number().optional(),
        taget: zod.string().optional(),
        condition: zod.string().optional(),
        selected_page: zod.string().optional(),
        pattern: zod.string().optional(),
        action: zod.string().optional(),
        interval: zod.number().optional(),
        next_run_at: zod.number().optional(),
        alternative_urls: zod.string().optional(),
        grab_from_page: zod.string().optional(),
        av_settings: zod.string().optional(),
        reverse: zod.boolean().optional(),
        enabled: zod.boolean().optional(),
        scan_page: zod.boolean().optional(),
      }),
    )
    .optional(),
  landings: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        landing_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        offer_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offer_selection: zod
    .enum(['before_click', 'after_click'])
    .default(getCampaignsIdStreamsResponseOfferSelectionDefault),
});
export const getCampaignsIdStreamsResponse = zod.array(
  getCampaignsIdStreamsResponseItem,
);

/**
 * Returns list of available flow filters
 * @summary Get available flow filters
 */
export const getStreamFiltersResponseItem = zod.object({
  value: zod.string().optional().describe('Filter Name'),
  tooltip: zod.string().optional().describe('Filter Description'),
  modes: zod
    .object({
      accept: zod.string().optional().describe('Accept mode'),
      reject: zod.string().optional().describe('Reject mode'),
    })
    .optional(),
  group: zod
    .string()
    .optional()
    .describe(
      "Group ID. It's used to group filters in a filters dropdown menu.",
    ),
  template: zod
    .string()
    .optional()
    .describe(
      'HTML code for rendering filter body view (Not recommended to use)',
    ),
  header_template: zod
    .string()
    .optional()
    .describe(
      'HTML code for rendering filter body view (Not recommended to use)',
    ),
  defaults: zod.string().optional().describe('Default values'),
});
export const getStreamFiltersResponse = zod.array(getStreamFiltersResponseItem);

/**
 * Returns list of available flow schemas
 * @summary Get available flow schemas
 */
export const getStreamSchemasResponseItem = zod.object({
  key: zod.string().optional(),
  name: zod.string().optional(),
  field: zod.string().optional(),
  type: zod.string().optional(),
  description: zod.string().optional(),
});
export const getStreamSchemasResponse = zod.array(getStreamSchemasResponseItem);

/**
 * Returns list of flow types
 * @summary Get list of flows types
 */
export const getStreamTypesResponseItem = zod.object({
  key: zod.string().optional(),
  name: zod.string().optional(),
  field: zod.string().optional(),
  type: zod.string().optional(),
  description: zod.string().optional(),
});
export const getStreamTypesResponse = zod.array(getStreamTypesResponseItem);

/**
 * Returns list of the events.
 * @summary Get flow events
 */
export const getStreamIdEventsParams = zod.object({
  id: zod.number().describe('Flow ID'),
});

export const getStreamIdEventsResponseOfferSelectionDefault = 'before_click';

export const getStreamIdEventsResponse = zod.object({
  id: zod.number().optional(),
  type: zod.string().optional(),
  name: zod.string().optional(),
  campaign_id: zod.number().optional(),
  position: zod.number().optional(),
  weight: zod.number().optional(),
  action_options: zod.object({}).optional(),
  comments: zod.string().optional(),
  state: zod.string().optional(),
  updated_at: zod.string().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  schema: zod.string().optional(),
  collect_clicks: zod.boolean().optional(),
  filter_or: zod.boolean().optional(),
  filters: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        name: zod.string().optional(),
        mode: zod.string().optional(),
        payload: zod.string().optional(),
        oid: zod.string().optional(),
      }),
    )
    .optional(),
  triggers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        oid: zod.number().optional(),
        stream_id: zod.number().optional(),
        taget: zod.string().optional(),
        condition: zod.string().optional(),
        selected_page: zod.string().optional(),
        pattern: zod.string().optional(),
        action: zod.string().optional(),
        interval: zod.number().optional(),
        next_run_at: zod.number().optional(),
        alternative_urls: zod.string().optional(),
        grab_from_page: zod.string().optional(),
        av_settings: zod.string().optional(),
        reverse: zod.boolean().optional(),
        enabled: zod.boolean().optional(),
        scan_page: zod.boolean().optional(),
      }),
    )
    .optional(),
  landings: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        landing_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        offer_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offer_selection: zod
    .enum(['before_click', 'after_click'])
    .default(getStreamIdEventsResponseOfferSelectionDefault),
});

/**
 * Returns available flow actions
 * @summary Get available flows actions
 */
export const getStreamsActionsResponseItem = zod.object({
  key: zod.string().optional(),
  name: zod.string().optional(),
  field: zod.string().optional(),
  type: zod.string().optional(),
  description: zod.string().optional(),
});
export const getStreamsActionsResponse = zod.array(
  getStreamsActionsResponseItem,
);

/**
 * Creates flow
 * @summary Create flow
 */
export const postStreamsBodyStateDefault = 'active';
export const postStreamsBodyCollectClicksDefault = false;
export const postStreamsBodyFilterOrDefault = false;

export const postStreamsBody = zod
  .object({
    campaign_id: zod.number().optional().describe('Campaign ID'),
    type: zod
      .enum(['forced', 'regular', 'default'])
      .optional()
      .describe('Flow type'),
    name: zod.string().optional().describe('Flow name'),
    position: zod
      .number()
      .optional()
      .describe('Position of a flow among other flows.'),
    weight: zod.number().optional().describe('Flow weight.'),
    action_options: zod.object({}).optional().describe('Action options.'),
    comments: zod
      .string()
      .optional()
      .describe('Comments or notes for the flow'),
    state: zod
      .enum(['active', 'disabled', 'deleted'])
      .default(postStreamsBodyStateDefault)
      .describe('State of the flow'),
    action_type: zod
      .string()
      .optional()
      .describe(
        "Action to perform (see 'Retrieve available flow action types')",
      ),
    schema: zod.enum(['landings', 'redirect', 'action']).optional(),
    collect_clicks: zod
      .boolean()
      .optional()
      .describe('Flow saves clicks (true/false)'),
    filter_or: zod
      .boolean()
      .optional()
      .describe("Use 'OR' operator between filters"),
    filters: zod
      .array(
        zod.object({
          id: zod
            .number()
            .optional()
            .describe('Flow filter ID. Provide it if you update the filter.'),
          name: zod
            .string()
            .describe("Flow filter name, see 'retrive-stream-filters' section"),
          mode: zod.enum(['accept', 'reject']).describe('Filter mode'),
          payload: zod
            .array(zod.string())
            .optional()
            .describe(
              'Flow payload. This field contains values for filters. For example, for a \"keyword\" Filter an Array [\"value1\", \"value2\"] must be provided',
            ),
        }),
      )
      .optional(),
    triggers: zod
      .array(
        zod.object({
          id: zod.number().optional().describe('Trigger ID.'),
          stream_id: zod.number().describe('Flow ID'),
          condition: zod
            .enum(['not_respond', 'always', 'not_contains', 'av_detected'])
            .describe('Condition'),
          target: zod
            .enum(['stream', 'landings', 'offers', 'selected_page'])
            .describe('Target'),
          selected_page: zod
            .string()
            .optional()
            .describe('The URL of the Page to Check'),
          pattern: zod.string().optional().describe('Text Pattern to Check'),
          action: zod
            .enum(['disable', 'replace_url', 'grab_from_page'])
            .describe('Action'),
          interval: zod.number().optional().describe('Interval between Checks'),
          alternative_urls: zod
            .string()
            .optional()
            .describe('URLs for replacement (split by \\n)'),
          grab_from_page: zod
            .string()
            .optional()
            .describe('URL of the page that contains a new URL'),
          av_settings: zod
            .string()
            .optional()
            .describe('Settings for AV Scanners'),
          reverse: zod
            .boolean()
            .optional()
            .describe('Perform also in a reverse mode (true/false)'),
          scan_page: zod
            .boolean()
            .optional()
            .describe('Tell AV scanner to scan the page content'),
        }),
      )
      .optional(),
    landings: zod
      .array(
        zod.object({
          landing_id: zod.number().describe('Landing Page ID'),
          share: zod.number().describe('Share among others'),
          state: zod.enum(['active', 'disabled']).optional(),
        }),
      )
      .optional(),
    offers: zod
      .array(
        zod.object({
          offer_id: zod.number().describe('Offer ID'),
          share: zod
            .number()
            .describe('Percentage of Traffic Sent to This Offer'),
          state: zod.enum(['active', 'disabled']).optional(),
        }),
      )
      .optional(),
  })
  .and(zod.object({}));

export const postStreamsResponseOfferSelectionDefault = 'before_click';

export const postStreamsResponse = zod.object({
  id: zod.number().optional(),
  type: zod.string().optional(),
  name: zod.string().optional(),
  campaign_id: zod.number().optional(),
  position: zod.number().optional(),
  weight: zod.number().optional(),
  action_options: zod.object({}).optional(),
  comments: zod.string().optional(),
  state: zod.string().optional(),
  updated_at: zod.string().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  schema: zod.string().optional(),
  collect_clicks: zod.boolean().optional(),
  filter_or: zod.boolean().optional(),
  filters: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        name: zod.string().optional(),
        mode: zod.string().optional(),
        payload: zod.string().optional(),
        oid: zod.string().optional(),
      }),
    )
    .optional(),
  triggers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        oid: zod.number().optional(),
        stream_id: zod.number().optional(),
        taget: zod.string().optional(),
        condition: zod.string().optional(),
        selected_page: zod.string().optional(),
        pattern: zod.string().optional(),
        action: zod.string().optional(),
        interval: zod.number().optional(),
        next_run_at: zod.number().optional(),
        alternative_urls: zod.string().optional(),
        grab_from_page: zod.string().optional(),
        av_settings: zod.string().optional(),
        reverse: zod.boolean().optional(),
        enabled: zod.boolean().optional(),
        scan_page: zod.boolean().optional(),
      }),
    )
    .optional(),
  landings: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        landing_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        offer_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offer_selection: zod
    .enum(['before_click', 'after_click'])
    .default(postStreamsResponseOfferSelectionDefault),
});

/**
 * Returns flow details.
 * @summary Get flow
 */
export const getStreamsIdParams = zod.object({
  id: zod.number().describe('Flow ID'),
});

export const getStreamsIdResponseOfferSelectionDefault = 'before_click';

export const getStreamsIdResponse = zod.object({
  id: zod.number().optional(),
  type: zod.string().optional(),
  name: zod.string().optional(),
  campaign_id: zod.number().optional(),
  position: zod.number().optional(),
  weight: zod.number().optional(),
  action_options: zod.object({}).optional(),
  comments: zod.string().optional(),
  state: zod.string().optional(),
  updated_at: zod.string().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  schema: zod.string().optional(),
  collect_clicks: zod.boolean().optional(),
  filter_or: zod.boolean().optional(),
  filters: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        name: zod.string().optional(),
        mode: zod.string().optional(),
        payload: zod.string().optional(),
        oid: zod.string().optional(),
      }),
    )
    .optional(),
  triggers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        oid: zod.number().optional(),
        stream_id: zod.number().optional(),
        taget: zod.string().optional(),
        condition: zod.string().optional(),
        selected_page: zod.string().optional(),
        pattern: zod.string().optional(),
        action: zod.string().optional(),
        interval: zod.number().optional(),
        next_run_at: zod.number().optional(),
        alternative_urls: zod.string().optional(),
        grab_from_page: zod.string().optional(),
        av_settings: zod.string().optional(),
        reverse: zod.boolean().optional(),
        enabled: zod.boolean().optional(),
        scan_page: zod.boolean().optional(),
      }),
    )
    .optional(),
  landings: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        landing_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        offer_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offer_selection: zod
    .enum(['before_click', 'after_click'])
    .default(getStreamsIdResponseOfferSelectionDefault),
});

/**
 * Updates flow.
 * @summary Update flow
 */
export const putStreamsIdParams = zod.object({
  id: zod.number().describe('Flow ID'),
});

export const putStreamsIdBodyStateDefault = 'active';
export const putStreamsIdBodyCollectClicksDefault = false;
export const putStreamsIdBodyFilterOrDefault = false;

export const putStreamsIdBody = zod.object({
  campaign_id: zod.number().optional().describe('Campaign ID'),
  type: zod
    .enum(['forced', 'regular', 'default'])
    .optional()
    .describe('Flow type'),
  name: zod.string().optional().describe('Flow name'),
  position: zod
    .number()
    .optional()
    .describe('Position of a flow among other flows.'),
  weight: zod.number().optional().describe('Flow weight.'),
  action_options: zod.object({}).optional().describe('Action options.'),
  comments: zod.string().optional().describe('Comments or notes for the flow'),
  state: zod
    .enum(['active', 'disabled', 'deleted'])
    .default(putStreamsIdBodyStateDefault)
    .describe('State of the flow'),
  action_type: zod
    .string()
    .optional()
    .describe("Action to perform (see 'Retrieve available flow action types')"),
  schema: zod.enum(['landings', 'redirect', 'action']).optional(),
  collect_clicks: zod
    .boolean()
    .optional()
    .describe('Flow saves clicks (true/false)'),
  filter_or: zod
    .boolean()
    .optional()
    .describe("Use 'OR' operator between filters"),
  filters: zod
    .array(
      zod.object({
        id: zod
          .number()
          .optional()
          .describe('Flow filter ID. Provide it if you update the filter.'),
        name: zod
          .string()
          .describe("Flow filter name, see 'retrive-stream-filters' section"),
        mode: zod.enum(['accept', 'reject']).describe('Filter mode'),
        payload: zod
          .array(zod.string())
          .optional()
          .describe(
            'Flow payload. This field contains values for filters. For example, for a \"keyword\" Filter an Array [\"value1\", \"value2\"] must be provided',
          ),
      }),
    )
    .optional(),
  triggers: zod
    .array(
      zod.object({
        id: zod.number().optional().describe('Trigger ID.'),
        stream_id: zod.number().describe('Flow ID'),
        condition: zod
          .enum(['not_respond', 'always', 'not_contains', 'av_detected'])
          .describe('Condition'),
        target: zod
          .enum(['stream', 'landings', 'offers', 'selected_page'])
          .describe('Target'),
        selected_page: zod
          .string()
          .optional()
          .describe('The URL of the Page to Check'),
        pattern: zod.string().optional().describe('Text Pattern to Check'),
        action: zod
          .enum(['disable', 'replace_url', 'grab_from_page'])
          .describe('Action'),
        interval: zod.number().optional().describe('Interval between Checks'),
        alternative_urls: zod
          .string()
          .optional()
          .describe('URLs for replacement (split by \\n)'),
        grab_from_page: zod
          .string()
          .optional()
          .describe('URL of the page that contains a new URL'),
        av_settings: zod
          .string()
          .optional()
          .describe('Settings for AV Scanners'),
        reverse: zod
          .boolean()
          .optional()
          .describe('Perform also in a reverse mode (true/false)'),
        scan_page: zod
          .boolean()
          .optional()
          .describe('Tell AV scanner to scan the page content'),
      }),
    )
    .optional(),
  landings: zod
    .array(
      zod.object({
        landing_id: zod.number().describe('Landing Page ID'),
        share: zod.number().describe('Share among others'),
        state: zod.enum(['active', 'disabled']).optional(),
      }),
    )
    .optional(),
  offers: zod
    .array(
      zod.object({
        offer_id: zod.number().describe('Offer ID'),
        share: zod
          .number()
          .describe('Percentage of Traffic Sent to This Offer'),
        state: zod.enum(['active', 'disabled']).optional(),
      }),
    )
    .optional(),
});

export const putStreamsIdResponseOfferSelectionDefault = 'before_click';

export const putStreamsIdResponse = zod.object({
  id: zod.number().optional(),
  type: zod.string().optional(),
  name: zod.string().optional(),
  campaign_id: zod.number().optional(),
  position: zod.number().optional(),
  weight: zod.number().optional(),
  action_options: zod.object({}).optional(),
  comments: zod.string().optional(),
  state: zod.string().optional(),
  updated_at: zod.string().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  schema: zod.string().optional(),
  collect_clicks: zod.boolean().optional(),
  filter_or: zod.boolean().optional(),
  filters: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        name: zod.string().optional(),
        mode: zod.string().optional(),
        payload: zod.string().optional(),
        oid: zod.string().optional(),
      }),
    )
    .optional(),
  triggers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        oid: zod.number().optional(),
        stream_id: zod.number().optional(),
        taget: zod.string().optional(),
        condition: zod.string().optional(),
        selected_page: zod.string().optional(),
        pattern: zod.string().optional(),
        action: zod.string().optional(),
        interval: zod.number().optional(),
        next_run_at: zod.number().optional(),
        alternative_urls: zod.string().optional(),
        grab_from_page: zod.string().optional(),
        av_settings: zod.string().optional(),
        reverse: zod.boolean().optional(),
        enabled: zod.boolean().optional(),
        scan_page: zod.boolean().optional(),
      }),
    )
    .optional(),
  landings: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        landing_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        offer_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offer_selection: zod
    .enum(['before_click', 'after_click'])
    .default(putStreamsIdResponseOfferSelectionDefault),
});

/**
 * Moves strema to the archive
 * @summary Delete flow
 */
export const deleteStreamsIdParams = zod.object({
  id: zod.number().describe('Flow ID'),
});

export const deleteStreamsIdResponseOfferSelectionDefault = 'before_click';

export const deleteStreamsIdResponse = zod.object({
  id: zod.number().optional(),
  type: zod.string().optional(),
  name: zod.string().optional(),
  campaign_id: zod.number().optional(),
  position: zod.number().optional(),
  weight: zod.number().optional(),
  action_options: zod.object({}).optional(),
  comments: zod.string().optional(),
  state: zod.string().optional(),
  updated_at: zod.string().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  schema: zod.string().optional(),
  collect_clicks: zod.boolean().optional(),
  filter_or: zod.boolean().optional(),
  filters: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        name: zod.string().optional(),
        mode: zod.string().optional(),
        payload: zod.string().optional(),
        oid: zod.string().optional(),
      }),
    )
    .optional(),
  triggers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        oid: zod.number().optional(),
        stream_id: zod.number().optional(),
        taget: zod.string().optional(),
        condition: zod.string().optional(),
        selected_page: zod.string().optional(),
        pattern: zod.string().optional(),
        action: zod.string().optional(),
        interval: zod.number().optional(),
        next_run_at: zod.number().optional(),
        alternative_urls: zod.string().optional(),
        grab_from_page: zod.string().optional(),
        av_settings: zod.string().optional(),
        reverse: zod.boolean().optional(),
        enabled: zod.boolean().optional(),
        scan_page: zod.boolean().optional(),
      }),
    )
    .optional(),
  landings: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        landing_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        offer_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offer_selection: zod
    .enum(['before_click', 'after_click'])
    .default(deleteStreamsIdResponseOfferSelectionDefault),
});

/**
 * Changes the state to 'disabled'
 * @summary Disable flow
 */
export const postStreamsIdDisableParams = zod.object({
  id: zod.number().describe('Flow ID'),
});

export const postStreamsIdDisableResponseOfferSelectionDefault = 'before_click';

export const postStreamsIdDisableResponse = zod.object({
  id: zod.number().optional(),
  type: zod.string().optional(),
  name: zod.string().optional(),
  campaign_id: zod.number().optional(),
  position: zod.number().optional(),
  weight: zod.number().optional(),
  action_options: zod.object({}).optional(),
  comments: zod.string().optional(),
  state: zod.string().optional(),
  updated_at: zod.string().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  schema: zod.string().optional(),
  collect_clicks: zod.boolean().optional(),
  filter_or: zod.boolean().optional(),
  filters: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        name: zod.string().optional(),
        mode: zod.string().optional(),
        payload: zod.string().optional(),
        oid: zod.string().optional(),
      }),
    )
    .optional(),
  triggers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        oid: zod.number().optional(),
        stream_id: zod.number().optional(),
        taget: zod.string().optional(),
        condition: zod.string().optional(),
        selected_page: zod.string().optional(),
        pattern: zod.string().optional(),
        action: zod.string().optional(),
        interval: zod.number().optional(),
        next_run_at: zod.number().optional(),
        alternative_urls: zod.string().optional(),
        grab_from_page: zod.string().optional(),
        av_settings: zod.string().optional(),
        reverse: zod.boolean().optional(),
        enabled: zod.boolean().optional(),
        scan_page: zod.boolean().optional(),
      }),
    )
    .optional(),
  landings: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        landing_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        offer_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offer_selection: zod
    .enum(['before_click', 'after_click'])
    .default(postStreamsIdDisableResponseOfferSelectionDefault),
});

/**
 * Changes the state to 'active'.
 * @summary Enable flow
 */
export const postStreamsIdEnableParams = zod.object({
  id: zod.number().describe('Flow ID'),
});

export const postStreamsIdEnableResponseOfferSelectionDefault = 'before_click';

export const postStreamsIdEnableResponse = zod.object({
  id: zod.number().optional(),
  type: zod.string().optional(),
  name: zod.string().optional(),
  campaign_id: zod.number().optional(),
  position: zod.number().optional(),
  weight: zod.number().optional(),
  action_options: zod.object({}).optional(),
  comments: zod.string().optional(),
  state: zod.string().optional(),
  updated_at: zod.string().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  schema: zod.string().optional(),
  collect_clicks: zod.boolean().optional(),
  filter_or: zod.boolean().optional(),
  filters: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        name: zod.string().optional(),
        mode: zod.string().optional(),
        payload: zod.string().optional(),
        oid: zod.string().optional(),
      }),
    )
    .optional(),
  triggers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        oid: zod.number().optional(),
        stream_id: zod.number().optional(),
        taget: zod.string().optional(),
        condition: zod.string().optional(),
        selected_page: zod.string().optional(),
        pattern: zod.string().optional(),
        action: zod.string().optional(),
        interval: zod.number().optional(),
        next_run_at: zod.number().optional(),
        alternative_urls: zod.string().optional(),
        grab_from_page: zod.string().optional(),
        av_settings: zod.string().optional(),
        reverse: zod.boolean().optional(),
        enabled: zod.boolean().optional(),
        scan_page: zod.boolean().optional(),
      }),
    )
    .optional(),
  landings: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        landing_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        offer_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offer_selection: zod
    .enum(['before_click', 'after_click'])
    .default(postStreamsIdEnableResponseOfferSelectionDefault),
});

/**
 * Restore an Archived Flow
 * @summary Restore an Archived Flow
 */
export const postStreamsIdRestoreParams = zod.object({
  id: zod.number().describe('Flow ID'),
});

export const postStreamsIdRestoreResponseOfferSelectionDefault = 'before_click';

export const postStreamsIdRestoreResponse = zod.object({
  id: zod.number().optional(),
  type: zod.string().optional(),
  name: zod.string().optional(),
  campaign_id: zod.number().optional(),
  position: zod.number().optional(),
  weight: zod.number().optional(),
  action_options: zod.object({}).optional(),
  comments: zod.string().optional(),
  state: zod.string().optional(),
  updated_at: zod.string().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  schema: zod.string().optional(),
  collect_clicks: zod.boolean().optional(),
  filter_or: zod.boolean().optional(),
  filters: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        name: zod.string().optional(),
        mode: zod.string().optional(),
        payload: zod.string().optional(),
        oid: zod.string().optional(),
      }),
    )
    .optional(),
  triggers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        oid: zod.number().optional(),
        stream_id: zod.number().optional(),
        taget: zod.string().optional(),
        condition: zod.string().optional(),
        selected_page: zod.string().optional(),
        pattern: zod.string().optional(),
        action: zod.string().optional(),
        interval: zod.number().optional(),
        next_run_at: zod.number().optional(),
        alternative_urls: zod.string().optional(),
        grab_from_page: zod.string().optional(),
        av_settings: zod.string().optional(),
        reverse: zod.boolean().optional(),
        enabled: zod.boolean().optional(),
        scan_page: zod.boolean().optional(),
      }),
    )
    .optional(),
  landings: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        landing_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        offer_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offer_selection: zod
    .enum(['before_click', 'after_click'])
    .default(postStreamsIdRestoreResponseOfferSelectionDefault),
});

/**
 * Returns deleted flows
 * @summary Get deleted flows
 */
export const getStreamsDeletedResponseOfferSelectionDefault = 'before_click';

export const getStreamsDeletedResponseItem = zod.object({
  id: zod.number().optional(),
  type: zod.string().optional(),
  name: zod.string().optional(),
  campaign_id: zod.number().optional(),
  position: zod.number().optional(),
  weight: zod.number().optional(),
  action_options: zod.object({}).optional(),
  comments: zod.string().optional(),
  state: zod.string().optional(),
  updated_at: zod.string().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  schema: zod.string().optional(),
  collect_clicks: zod.boolean().optional(),
  filter_or: zod.boolean().optional(),
  filters: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        name: zod.string().optional(),
        mode: zod.string().optional(),
        payload: zod.string().optional(),
        oid: zod.string().optional(),
      }),
    )
    .optional(),
  triggers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        oid: zod.number().optional(),
        stream_id: zod.number().optional(),
        taget: zod.string().optional(),
        condition: zod.string().optional(),
        selected_page: zod.string().optional(),
        pattern: zod.string().optional(),
        action: zod.string().optional(),
        interval: zod.number().optional(),
        next_run_at: zod.number().optional(),
        alternative_urls: zod.string().optional(),
        grab_from_page: zod.string().optional(),
        av_settings: zod.string().optional(),
        reverse: zod.boolean().optional(),
        enabled: zod.boolean().optional(),
        scan_page: zod.boolean().optional(),
      }),
    )
    .optional(),
  landings: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        landing_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        offer_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offer_selection: zod
    .enum(['before_click', 'after_click'])
    .default(getStreamsDeletedResponseOfferSelectionDefault),
});
export const getStreamsDeletedResponse = zod.array(
  getStreamsDeletedResponseItem,
);

/**
 * Searching in flows
 * @summary Search in flows
 */
export const getStreamsSearchQueryParams = zod.object({
  query: zod.string().describe('Search query'),
});

export const getStreamsSearchResponseOfferSelectionDefault = 'before_click';

export const getStreamsSearchResponseItem = zod.object({
  id: zod.number().optional(),
  type: zod.string().optional(),
  name: zod.string().optional(),
  campaign_id: zod.number().optional(),
  position: zod.number().optional(),
  weight: zod.number().optional(),
  action_options: zod.object({}).optional(),
  comments: zod.string().optional(),
  state: zod.string().optional(),
  updated_at: zod.string().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  schema: zod.string().optional(),
  collect_clicks: zod.boolean().optional(),
  filter_or: zod.boolean().optional(),
  filters: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        name: zod.string().optional(),
        mode: zod.string().optional(),
        payload: zod.string().optional(),
        oid: zod.string().optional(),
      }),
    )
    .optional(),
  triggers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        oid: zod.number().optional(),
        stream_id: zod.number().optional(),
        taget: zod.string().optional(),
        condition: zod.string().optional(),
        selected_page: zod.string().optional(),
        pattern: zod.string().optional(),
        action: zod.string().optional(),
        interval: zod.number().optional(),
        next_run_at: zod.number().optional(),
        alternative_urls: zod.string().optional(),
        grab_from_page: zod.string().optional(),
        av_settings: zod.string().optional(),
        reverse: zod.boolean().optional(),
        enabled: zod.boolean().optional(),
        scan_page: zod.boolean().optional(),
      }),
    )
    .optional(),
  landings: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        landing_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offers: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        stream_id: zod.number().optional(),
        offer_id: zod.number().optional(),
        state: zod.string().optional(),
        share: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
      }),
    )
    .optional(),
  offer_selection: zod
    .enum(['before_click', 'after_click'])
    .default(getStreamsSearchResponseOfferSelectionDefault),
});
export const getStreamsSearchResponse = zod.array(getStreamsSearchResponseItem);
