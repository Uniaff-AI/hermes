/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keitaro Admin API
 * OpenAPI spec version: v1
 */
import { z as zod } from 'zod';

import { fetcher } from '../../../utils/fetcher';

/**
 * Returns conversions
 * @summary Get conversions
 */
export const postConversionsLogBody = zod.object({
  range: zod
    .object({
      from: zod.string().optional().describe("Start Date, e.g., '2017-09-10'"),
      to: zod.string().optional().describe("End Date, e.g., '2017-09-10'"),
      timezone: zod.string().optional().describe('E.g., Europe/Madrid'),
      interval: zod
        .any()
        .optional()
        .describe(
          'One of the intervals can be used: today, yesterday, 7_days_ago, first_day_of_this_week, 1_month_ago, first_day_of_this_month, 1_year_ago, first_day_of_this_year, all_time\n',
        ),
    })
    .optional(),
  limit: zod.number().optional().describe('Limit result'),
  offset: zod.number().optional().describe('Offset for results'),
  columns: zod.array(zod.string()).optional(),
  filters: zod
    .array(
      zod.object({
        name: zod.string().describe('Name of the field'),
        operator: zod
          .string()
          .describe(
            'One of the available operators (<a href=\"#operators\">operators</a>)\n',
          ),
        expression: zod
          .string()
          .or(zod.number())
          .optional()
          .describe('Expression for the filter'),
      }),
    )
    .optional(),
  sort: zod
    .array(
      zod.object({
        name: zod.string().describe('Column or metric name'),
        order: zod.enum(['ASC', 'DESC']).describe('Order'),
      }),
    )
    .optional(),
});

export const postConversionsLogResponse = zod.object({
  rows: zod.array(zod.string()).optional(),
  total: zod.number().optional(),
  meta: zod.array(zod.string()).optional(),
});
