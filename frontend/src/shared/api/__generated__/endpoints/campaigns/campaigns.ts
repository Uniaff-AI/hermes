/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Keitaro Admin API
 * OpenAPI spec version: v1
 */
import type {
  BadRequestResponse,
  Campaign,
  CampaignCostRequest,
  CampaignRequest,
  Domain,
  GetCampaignsParams,
  InternalErrorResponse,
  NotAcceptableResponse,
  NotFoundResponse,
  PaymentRequiredResponse,
  PostCampaignsBody,
  UnauthorizedResponse,
} from '../../models';

import { fetcher } from '../../../utils/fetcher';

/**
 * Returns the campaigns
 * @summary Get all campaigns
 */
export type getCampaignsResponse200 = {
  data: Campaign[];
  status: 200;
};

export type getCampaignsResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getCampaignsResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getCampaignsResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getCampaignsResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getCampaignsResponseComposite =
  | getCampaignsResponse200
  | getCampaignsResponse400
  | getCampaignsResponse401
  | getCampaignsResponse402
  | getCampaignsResponse500;

export type getCampaignsResponse = getCampaignsResponseComposite & {
  headers: Headers;
};

export const getGetCampaignsUrl = (params?: GetCampaignsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://admin-api.docs.keitaro.io/campaigns?${stringifiedParams}`
    : `https://admin-api.docs.keitaro.io/campaigns`;
};

export const getCampaigns = async (
  params?: GetCampaignsParams,
  options?: RequestInit,
): Promise<getCampaignsResponse> => {
  return fetcher<getCampaignsResponse>(getGetCampaignsUrl(params), {
    ...options,
    method: 'GET',
  });
};

/**
 * Creates campaign
 * @summary Create campaign
 */
export type postCampaignsResponse200 = {
  data: Campaign;
  status: 200;
};

export type postCampaignsResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postCampaignsResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postCampaignsResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postCampaignsResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postCampaignsResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postCampaignsResponseComposite =
  | postCampaignsResponse200
  | postCampaignsResponse400
  | postCampaignsResponse401
  | postCampaignsResponse402
  | postCampaignsResponse406
  | postCampaignsResponse500;

export type postCampaignsResponse = postCampaignsResponseComposite & {
  headers: Headers;
};

export const getPostCampaignsUrl = () => {
  return `https://admin-api.docs.keitaro.io/campaigns`;
};

export const postCampaigns = async (
  postCampaignsBody: PostCampaignsBody,
  options?: RequestInit,
): Promise<postCampaignsResponse> => {
  return fetcher<postCampaignsResponse>(getPostCampaignsUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postCampaignsBody),
  });
};

/**
 * Returns campaign information
 * @summary Get campaign
 */
export type getCampaignsIdResponse200 = {
  data: Campaign;
  status: 200;
};

export type getCampaignsIdResponseComposite = getCampaignsIdResponse200;

export type getCampaignsIdResponse = getCampaignsIdResponseComposite & {
  headers: Headers;
};

export const getGetCampaignsIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/campaigns/${id}`;
};

export const getCampaignsId = async (
  id: number,
  options?: RequestInit,
): Promise<getCampaignsIdResponse> => {
  return fetcher<getCampaignsIdResponse>(getGetCampaignsIdUrl(id), {
    ...options,
    method: 'GET',
  });
};

/**
 * Update a campaign
 * @summary Update campaign
 */
export type putCampaignsIdResponse200 = {
  data: Campaign;
  status: 200;
};

export type putCampaignsIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type putCampaignsIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type putCampaignsIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type putCampaignsIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type putCampaignsIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type putCampaignsIdResponseComposite =
  | putCampaignsIdResponse200
  | putCampaignsIdResponse400
  | putCampaignsIdResponse401
  | putCampaignsIdResponse402
  | putCampaignsIdResponse404
  | putCampaignsIdResponse500;

export type putCampaignsIdResponse = putCampaignsIdResponseComposite & {
  headers: Headers;
};

export const getPutCampaignsIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/campaigns/${id}`;
};

export const putCampaignsId = async (
  id: number,
  campaignRequest: CampaignRequest,
  options?: RequestInit,
): Promise<putCampaignsIdResponse> => {
  return fetcher<putCampaignsIdResponse>(getPutCampaignsIdUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(campaignRequest),
  });
};

/**
 * Moves campaign to archive
 * @summary Move campaign to archive
 */
export type deleteCampaignsIdResponse201 = {
  data: Domain;
  status: 201;
};

export type deleteCampaignsIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type deleteCampaignsIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type deleteCampaignsIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type deleteCampaignsIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type deleteCampaignsIdResponseComposite =
  | deleteCampaignsIdResponse201
  | deleteCampaignsIdResponse400
  | deleteCampaignsIdResponse401
  | deleteCampaignsIdResponse402
  | deleteCampaignsIdResponse500;

export type deleteCampaignsIdResponse = deleteCampaignsIdResponseComposite & {
  headers: Headers;
};

export const getDeleteCampaignsIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/campaigns/${id}`;
};

export const deleteCampaignsId = async (
  id: number,
  options?: RequestInit,
): Promise<deleteCampaignsIdResponse> => {
  return fetcher<deleteCampaignsIdResponse>(getDeleteCampaignsIdUrl(id), {
    ...options,
    method: 'DELETE',
  });
};

/**
 * Clone a Campaign
 * @summary Clone Campaign
 */
export type postCampaignsIdCloneResponse200 = {
  data: Campaign;
  status: 200;
};

export type postCampaignsIdCloneResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postCampaignsIdCloneResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postCampaignsIdCloneResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postCampaignsIdCloneResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postCampaignsIdCloneResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postCampaignsIdCloneResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postCampaignsIdCloneResponseComposite =
  | postCampaignsIdCloneResponse200
  | postCampaignsIdCloneResponse400
  | postCampaignsIdCloneResponse401
  | postCampaignsIdCloneResponse402
  | postCampaignsIdCloneResponse404
  | postCampaignsIdCloneResponse406
  | postCampaignsIdCloneResponse500;

export type postCampaignsIdCloneResponse =
  postCampaignsIdCloneResponseComposite & {
    headers: Headers;
  };

export const getPostCampaignsIdCloneUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/campaigns/${id}/clone`;
};

export const postCampaignsIdClone = async (
  id: number,
  options?: RequestInit,
): Promise<postCampaignsIdCloneResponse> => {
  return fetcher<postCampaignsIdCloneResponse>(getPostCampaignsIdCloneUrl(id), {
    ...options,
    method: 'POST',
  });
};

/**
 * Disable a Campaign
 * @summary Disable Campaign
 */
export type postCampaignsIdDisableResponse200 = {
  data: Campaign;
  status: 200;
};

export type postCampaignsIdDisableResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postCampaignsIdDisableResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postCampaignsIdDisableResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postCampaignsIdDisableResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postCampaignsIdDisableResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postCampaignsIdDisableResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postCampaignsIdDisableResponseComposite =
  | postCampaignsIdDisableResponse200
  | postCampaignsIdDisableResponse400
  | postCampaignsIdDisableResponse401
  | postCampaignsIdDisableResponse402
  | postCampaignsIdDisableResponse404
  | postCampaignsIdDisableResponse406
  | postCampaignsIdDisableResponse500;

export type postCampaignsIdDisableResponse =
  postCampaignsIdDisableResponseComposite & {
    headers: Headers;
  };

export const getPostCampaignsIdDisableUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/campaigns/${id}/disable`;
};

export const postCampaignsIdDisable = async (
  id: number,
  options?: RequestInit,
): Promise<postCampaignsIdDisableResponse> => {
  return fetcher<postCampaignsIdDisableResponse>(
    getPostCampaignsIdDisableUrl(id),
    {
      ...options,
      method: 'POST',
    },
  );
};

/**
 * Enable a Campaign
 * @summary Enable Campaign
 */
export type postCampaignsIdEnableResponse200 = {
  data: Campaign;
  status: 200;
};

export type postCampaignsIdEnableResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postCampaignsIdEnableResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postCampaignsIdEnableResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postCampaignsIdEnableResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postCampaignsIdEnableResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postCampaignsIdEnableResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postCampaignsIdEnableResponseComposite =
  | postCampaignsIdEnableResponse200
  | postCampaignsIdEnableResponse400
  | postCampaignsIdEnableResponse401
  | postCampaignsIdEnableResponse402
  | postCampaignsIdEnableResponse404
  | postCampaignsIdEnableResponse406
  | postCampaignsIdEnableResponse500;

export type postCampaignsIdEnableResponse =
  postCampaignsIdEnableResponseComposite & {
    headers: Headers;
  };

export const getPostCampaignsIdEnableUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/campaigns/${id}/enable`;
};

export const postCampaignsIdEnable = async (
  id: number,
  options?: RequestInit,
): Promise<postCampaignsIdEnableResponse> => {
  return fetcher<postCampaignsIdEnableResponse>(
    getPostCampaignsIdEnableUrl(id),
    {
      ...options,
      method: 'POST',
    },
  );
};

/**
 * Restore a Campaign
 * @summary Restore Campaign
 */
export type postCampaignsIdRestoreResponse200 = {
  data: Campaign;
  status: 200;
};

export type postCampaignsIdRestoreResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postCampaignsIdRestoreResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postCampaignsIdRestoreResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postCampaignsIdRestoreResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postCampaignsIdRestoreResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postCampaignsIdRestoreResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postCampaignsIdRestoreResponseComposite =
  | postCampaignsIdRestoreResponse200
  | postCampaignsIdRestoreResponse400
  | postCampaignsIdRestoreResponse401
  | postCampaignsIdRestoreResponse402
  | postCampaignsIdRestoreResponse404
  | postCampaignsIdRestoreResponse406
  | postCampaignsIdRestoreResponse500;

export type postCampaignsIdRestoreResponse =
  postCampaignsIdRestoreResponseComposite & {
    headers: Headers;
  };

export const getPostCampaignsIdRestoreUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/campaigns/${id}/restore`;
};

export const postCampaignsIdRestore = async (
  id: number,
  options?: RequestInit,
): Promise<postCampaignsIdRestoreResponse> => {
  return fetcher<postCampaignsIdRestoreResponse>(
    getPostCampaignsIdRestoreUrl(id),
    {
      ...options,
      method: 'POST',
    },
  );
};

/**
 * <p>Updates campaign costs.</p> <b>IMPORTANT!</b> That actions is VERY SLOW. Use <a href="#tag/Clicks/paths/~1clicks~1update_costs/post">Update costs in bulk</a> instead</p>
 * @summary Update costs for campaign
 */
export type postCampaignsIdUpdateCostsResponse200 = {
  data: void;
  status: 200;
};

export type postCampaignsIdUpdateCostsResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postCampaignsIdUpdateCostsResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postCampaignsIdUpdateCostsResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postCampaignsIdUpdateCostsResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postCampaignsIdUpdateCostsResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postCampaignsIdUpdateCostsResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postCampaignsIdUpdateCostsResponseComposite =
  | postCampaignsIdUpdateCostsResponse200
  | postCampaignsIdUpdateCostsResponse400
  | postCampaignsIdUpdateCostsResponse401
  | postCampaignsIdUpdateCostsResponse402
  | postCampaignsIdUpdateCostsResponse404
  | postCampaignsIdUpdateCostsResponse406
  | postCampaignsIdUpdateCostsResponse500;

export type postCampaignsIdUpdateCostsResponse =
  postCampaignsIdUpdateCostsResponseComposite & {
    headers: Headers;
  };

export const getPostCampaignsIdUpdateCostsUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/campaigns/${id}/update_costs`;
};

export const postCampaignsIdUpdateCosts = async (
  id: number,
  campaignCostRequest: CampaignCostRequest,
  options?: RequestInit,
): Promise<postCampaignsIdUpdateCostsResponse> => {
  return fetcher<postCampaignsIdUpdateCostsResponse>(
    getPostCampaignsIdUpdateCostsUrl(id),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(campaignCostRequest),
    },
  );
};

/**
 * Clean archive
 * @summary Clean archive
 */
export type postCampaignsCleanArchiveResponse200 = {
  data: void;
  status: 200;
};

export type postCampaignsCleanArchiveResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postCampaignsCleanArchiveResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postCampaignsCleanArchiveResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postCampaignsCleanArchiveResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postCampaignsCleanArchiveResponseComposite =
  | postCampaignsCleanArchiveResponse200
  | postCampaignsCleanArchiveResponse400
  | postCampaignsCleanArchiveResponse401
  | postCampaignsCleanArchiveResponse402
  | postCampaignsCleanArchiveResponse500;

export type postCampaignsCleanArchiveResponse =
  postCampaignsCleanArchiveResponseComposite & {
    headers: Headers;
  };

export const getPostCampaignsCleanArchiveUrl = () => {
  return `https://admin-api.docs.keitaro.io/campaigns/clean_archive`;
};

export const postCampaignsCleanArchive = async (
  options?: RequestInit,
): Promise<postCampaignsCleanArchiveResponse> => {
  return fetcher<postCampaignsCleanArchiveResponse>(
    getPostCampaignsCleanArchiveUrl(),
    {
      ...options,
      method: 'POST',
    },
  );
};

/**
 * Get deleted campaigns
 * @summary Get deleted campaigns
 */
export type getCampaignsDeletedResponse200 = {
  data: Campaign[];
  status: 200;
};

export type getCampaignsDeletedResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getCampaignsDeletedResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getCampaignsDeletedResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getCampaignsDeletedResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getCampaignsDeletedResponseComposite =
  | getCampaignsDeletedResponse200
  | getCampaignsDeletedResponse400
  | getCampaignsDeletedResponse401
  | getCampaignsDeletedResponse402
  | getCampaignsDeletedResponse500;

export type getCampaignsDeletedResponse =
  getCampaignsDeletedResponseComposite & {
    headers: Headers;
  };

export const getGetCampaignsDeletedUrl = () => {
  return `https://admin-api.docs.keitaro.io/campaigns/deleted`;
};

export const getCampaignsDeleted = async (
  options?: RequestInit,
): Promise<getCampaignsDeletedResponse> => {
  return fetcher<getCampaignsDeletedResponse>(getGetCampaignsDeletedUrl(), {
    ...options,
    method: 'GET',
  });
};
