/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keitaro Admin API
 * OpenAPI spec version: v1
 */
import { z as zod } from 'zod';

import { fetcher } from '../../../utils/fetcher';

/**
 * Returns list of the users
 * @summary Get users
 */
export const getUsersResponseItem = zod.object({
  id: zod.number().optional().describe('User ID'),
  login: zod.string().optional().describe('User login'),
  type: zod.enum(['USER', 'ADMIN']).optional().describe('User type'),
  access_data: zod
    .object({
      resources: zod
        .array(
          zod.enum([
            'offers',
            'landings',
            'groups',
            'affiliate_networks',
            'traffic_sources',
            'streams',
            'groups',
            'domains',
            'archive',
            'geo_profiles',
            'integrations',
            'logs',
            'geo_dbs',
            'campaigns',
            'api_keys',
            'reports',
            'clicks',
            'conversions',
            'trends',
            'cleaner',
            'dashboard',
          ])
        )
        .optional(),
      offers_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Offers access type'),
      campaigns_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Campaigns access type'),
      landings_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Landing pages access type'),
      traffic_sources_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Traffic sources access type'),
      streams_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Flows access type'),
      affiliate_networks_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Affiliate networks access type'),
      domains_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Domains access type'),
      offers_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID offers'),
      campaigns_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID campaigns'),
      landings_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID landings'),
      traffic_sources_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID traffic sources'),
      affiliate_networks_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID affiliate networks'),
      domains_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID domains'),
      offers_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available group ID'),
      campaigns_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      landings_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      traffic_sources_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      affiliate_networks_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      domains_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available group ID'),
      reports: zod
        .array(zod.string())
        .optional()
        .describe('List of fields to which access is restricted'),
    })
    .describe('User access data')
    .and(
      zod.object({
        resources: zod
          .array(zod.string())
          .optional()
          .describe('Available resources'),
        allowed_resources: zod
          .array(zod.string())
          .optional()
          .describe('Allowed resources'),
        reports: zod.array(zod.string()).optional().describe('Allowed reports'),
      })
    )
    .optional(),
  preferences: zod
    .object({
      language: zod.enum(['ru', 'en']).optional().describe('User language'),
      timezone: zod
        .string()
        .optional()
        .describe('User timezone in UTC, e.g., \"Europe/Minsk\"'),
    })
    .optional(),
});
export const getUsersResponse = zod.array(getUsersResponseItem);

/**
 * Creates user
 * @summary Create user
 */
export const postUsersBody = zod.object({
  login: zod.string().describe('User login'),
  new_password: zod.string().describe('User password'),
  new_password_confirmation: zod.string().describe('Repeat user password'),
  type: zod.enum(['USER', 'ADMIN']).describe('User type'),
  preferences: zod
    .object({
      language: zod.enum(['ru', 'en']).optional().describe('User language'),
      timezone: zod
        .string()
        .optional()
        .describe('User timezone in UTC, e.g., \"Europe/Minsk\"'),
    })
    .optional(),
});

export const postUsersResponse = zod.object({
  id: zod.number().optional().describe('User ID'),
  login: zod.string().optional().describe('User login'),
  type: zod.enum(['USER', 'ADMIN']).optional().describe('User type'),
  access_data: zod
    .object({
      resources: zod
        .array(
          zod.enum([
            'offers',
            'landings',
            'groups',
            'affiliate_networks',
            'traffic_sources',
            'streams',
            'groups',
            'domains',
            'archive',
            'geo_profiles',
            'integrations',
            'logs',
            'geo_dbs',
            'campaigns',
            'api_keys',
            'reports',
            'clicks',
            'conversions',
            'trends',
            'cleaner',
            'dashboard',
          ])
        )
        .optional(),
      offers_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Offers access type'),
      campaigns_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Campaigns access type'),
      landings_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Landing pages access type'),
      traffic_sources_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Traffic sources access type'),
      streams_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Flows access type'),
      affiliate_networks_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Affiliate networks access type'),
      domains_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Domains access type'),
      offers_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID offers'),
      campaigns_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID campaigns'),
      landings_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID landings'),
      traffic_sources_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID traffic sources'),
      affiliate_networks_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID affiliate networks'),
      domains_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID domains'),
      offers_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available group ID'),
      campaigns_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      landings_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      traffic_sources_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      affiliate_networks_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      domains_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available group ID'),
      reports: zod
        .array(zod.string())
        .optional()
        .describe('List of fields to which access is restricted'),
    })
    .describe('User access data')
    .and(
      zod.object({
        resources: zod
          .array(zod.string())
          .optional()
          .describe('Available resources'),
        allowed_resources: zod
          .array(zod.string())
          .optional()
          .describe('Allowed resources'),
        reports: zod.array(zod.string()).optional().describe('Allowed reports'),
      })
    )
    .optional(),
  preferences: zod
    .object({
      language: zod.enum(['ru', 'en']).optional().describe('User language'),
      timezone: zod
        .string()
        .optional()
        .describe('User timezone in UTC, e.g., \"Europe/Minsk\"'),
    })
    .optional(),
});

/**
 * Returns user details.
 * @summary Get user
 */
export const getUsersIdParams = zod.object({
  id: zod.number().describe('User ID'),
});

export const getUsersIdResponse = zod.object({
  id: zod.number().optional().describe('User ID'),
  login: zod.string().optional().describe('User login'),
  type: zod.enum(['USER', 'ADMIN']).optional().describe('User type'),
  access_data: zod
    .object({
      resources: zod
        .array(
          zod.enum([
            'offers',
            'landings',
            'groups',
            'affiliate_networks',
            'traffic_sources',
            'streams',
            'groups',
            'domains',
            'archive',
            'geo_profiles',
            'integrations',
            'logs',
            'geo_dbs',
            'campaigns',
            'api_keys',
            'reports',
            'clicks',
            'conversions',
            'trends',
            'cleaner',
            'dashboard',
          ])
        )
        .optional(),
      offers_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Offers access type'),
      campaigns_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Campaigns access type'),
      landings_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Landing pages access type'),
      traffic_sources_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Traffic sources access type'),
      streams_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Flows access type'),
      affiliate_networks_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Affiliate networks access type'),
      domains_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Domains access type'),
      offers_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID offers'),
      campaigns_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID campaigns'),
      landings_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID landings'),
      traffic_sources_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID traffic sources'),
      affiliate_networks_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID affiliate networks'),
      domains_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID domains'),
      offers_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available group ID'),
      campaigns_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      landings_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      traffic_sources_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      affiliate_networks_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      domains_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available group ID'),
      reports: zod
        .array(zod.string())
        .optional()
        .describe('List of fields to which access is restricted'),
    })
    .describe('User access data')
    .and(
      zod.object({
        resources: zod
          .array(zod.string())
          .optional()
          .describe('Available resources'),
        allowed_resources: zod
          .array(zod.string())
          .optional()
          .describe('Allowed resources'),
        reports: zod.array(zod.string()).optional().describe('Allowed reports'),
      })
    )
    .optional(),
  preferences: zod
    .object({
      language: zod.enum(['ru', 'en']).optional().describe('User language'),
      timezone: zod
        .string()
        .optional()
        .describe('User timezone in UTC, e.g., \"Europe/Minsk\"'),
    })
    .optional(),
});

/**
 * Updates user.
 * @summary Update user
 */
export const putUsersIdParams = zod.object({
  id: zod.number().describe('User ID'),
});

export const putUsersIdBody = zod.object({
  login: zod.string().optional().describe('User login'),
  new_password: zod.string().optional().describe('User password'),
  new_password_confirmation: zod
    .string()
    .optional()
    .describe('User password repeat'),
  type: zod.enum(['USER', 'ADMIN']).optional().describe('User type'),
  keyCount: zod.number().optional().describe('API keys count'),
  preferences: zod
    .object({
      language: zod.enum(['ru', 'en']).optional().describe('User language'),
      timezone: zod
        .string()
        .optional()
        .describe('User timezone in UTC, e.g., \"Europe/Minsk\"'),
    })
    .optional(),
});

export const putUsersIdResponse = zod.object({
  id: zod.number().optional().describe('User ID'),
  login: zod.string().optional().describe('User login'),
  type: zod.enum(['USER', 'ADMIN']).optional().describe('User type'),
  access_data: zod
    .object({
      resources: zod
        .array(
          zod.enum([
            'offers',
            'landings',
            'groups',
            'affiliate_networks',
            'traffic_sources',
            'streams',
            'groups',
            'domains',
            'archive',
            'geo_profiles',
            'integrations',
            'logs',
            'geo_dbs',
            'campaigns',
            'api_keys',
            'reports',
            'clicks',
            'conversions',
            'trends',
            'cleaner',
            'dashboard',
          ])
        )
        .optional(),
      offers_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Offers access type'),
      campaigns_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Campaigns access type'),
      landings_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Landing pages access type'),
      traffic_sources_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Traffic sources access type'),
      streams_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Flows access type'),
      affiliate_networks_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Affiliate networks access type'),
      domains_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Domains access type'),
      offers_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID offers'),
      campaigns_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID campaigns'),
      landings_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID landings'),
      traffic_sources_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID traffic sources'),
      affiliate_networks_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID affiliate networks'),
      domains_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID domains'),
      offers_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available group ID'),
      campaigns_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      landings_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      traffic_sources_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      affiliate_networks_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      domains_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available group ID'),
      reports: zod
        .array(zod.string())
        .optional()
        .describe('List of fields to which access is restricted'),
    })
    .describe('User access data')
    .and(
      zod.object({
        resources: zod
          .array(zod.string())
          .optional()
          .describe('Available resources'),
        allowed_resources: zod
          .array(zod.string())
          .optional()
          .describe('Allowed resources'),
        reports: zod.array(zod.string()).optional().describe('Allowed reports'),
      })
    )
    .optional(),
  preferences: zod
    .object({
      language: zod.enum(['ru', 'en']).optional().describe('User language'),
      timezone: zod
        .string()
        .optional()
        .describe('User timezone in UTC, e.g., \"Europe/Minsk\"'),
    })
    .optional(),
});

/**
 * Deletes user. Cannot be reverted.
 * @summary Delete user
 */
export const deleteUsersIdParams = zod.object({
  id: zod.number().describe('User ID'),
});

/**
 * Updates access for user.
 * @summary Update access
 */
export const putUsersIdAccessParams = zod.object({
  id: zod.number().describe('User ID'),
});

export const putUsersIdAccessBody = zod.object({
  access_data: zod
    .object({
      resources: zod
        .array(
          zod.enum([
            'offers',
            'landings',
            'groups',
            'affiliate_networks',
            'traffic_sources',
            'streams',
            'groups',
            'domains',
            'archive',
            'geo_profiles',
            'integrations',
            'logs',
            'geo_dbs',
            'campaigns',
            'api_keys',
            'reports',
            'clicks',
            'conversions',
            'trends',
            'cleaner',
            'dashboard',
          ])
        )
        .optional(),
      offers_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Offers access type'),
      campaigns_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Campaigns access type'),
      landings_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Landing pages access type'),
      traffic_sources_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Traffic sources access type'),
      streams_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Flows access type'),
      affiliate_networks_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Affiliate networks access type'),
      domains_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Domains access type'),
      offers_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID offers'),
      campaigns_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID campaigns'),
      landings_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID landings'),
      traffic_sources_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID traffic sources'),
      affiliate_networks_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID affiliate networks'),
      domains_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID domains'),
      offers_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available group ID'),
      campaigns_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      landings_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      traffic_sources_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      affiliate_networks_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      domains_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available group ID'),
      reports: zod
        .array(zod.string())
        .optional()
        .describe('List of fields to which access is restricted'),
    })
    .describe('User access data')
    .and(
      zod.object({
        resources: zod
          .array(zod.string())
          .optional()
          .describe('Available resources'),
        reports: zod.array(zod.string()).optional().describe('Allowed reports'),
      })
    )
    .optional(),
});

export const putUsersIdAccessResponse = zod.object({
  id: zod.number().optional().describe('User ID'),
  login: zod.string().optional().describe('User login'),
  type: zod.enum(['USER', 'ADMIN']).optional().describe('User type'),
  access_data: zod
    .object({
      resources: zod
        .array(
          zod.enum([
            'offers',
            'landings',
            'groups',
            'affiliate_networks',
            'traffic_sources',
            'streams',
            'groups',
            'domains',
            'archive',
            'geo_profiles',
            'integrations',
            'logs',
            'geo_dbs',
            'campaigns',
            'api_keys',
            'reports',
            'clicks',
            'conversions',
            'trends',
            'cleaner',
            'dashboard',
          ])
        )
        .optional(),
      offers_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Offers access type'),
      campaigns_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Campaigns access type'),
      landings_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Landing pages access type'),
      traffic_sources_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Traffic sources access type'),
      streams_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Flows access type'),
      affiliate_networks_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Affiliate networks access type'),
      domains_access_type: zod
        .enum([
          'full_access',
          'read_only',
          'to_groups_and_selected',
          'created_by_user_groups_and_selected',
        ])
        .optional()
        .describe('Domains access type'),
      offers_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID offers'),
      campaigns_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID campaigns'),
      landings_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID landings'),
      traffic_sources_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID traffic sources'),
      affiliate_networks_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID affiliate networks'),
      domains_selected_entities: zod
        .array(zod.number())
        .optional()
        .describe('List of available ID domains'),
      offers_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available group ID'),
      campaigns_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      landings_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      traffic_sources_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      affiliate_networks_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available groups ID'),
      domains_selected_groups: zod
        .array(zod.number())
        .optional()
        .describe('List of available group ID'),
      reports: zod
        .array(zod.string())
        .optional()
        .describe('List of fields to which access is restricted'),
    })
    .describe('User access data')
    .and(
      zod.object({
        resources: zod
          .array(zod.string())
          .optional()
          .describe('Available resources'),
        allowed_resources: zod
          .array(zod.string())
          .optional()
          .describe('Allowed resources'),
        reports: zod.array(zod.string()).optional().describe('Allowed reports'),
      })
    )
    .optional(),
  preferences: zod
    .object({
      language: zod.enum(['ru', 'en']).optional().describe('User language'),
      timezone: zod
        .string()
        .optional()
        .describe('User timezone in UTC, e.g., \"Europe/Minsk\"'),
    })
    .optional(),
});
