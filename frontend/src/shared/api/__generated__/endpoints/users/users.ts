/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Keitaro Admin API
 * OpenAPI spec version: v1
 */
import type {
  BadRequestResponse,
  InternalErrorResponse,
  NotAcceptableResponse,
  NotFoundResponse,
  PaymentRequiredResponse,
  UnauthorizedResponse,
  User,
  UserRequest,
  UserRequestAccess,
  UserRequestUpdate,
} from '../../models';

import { fetcher } from '../../../utils/fetcher';

/**
 * Returns list of the users
 * @summary Get users
 */
export type getUsersResponse200 = {
  data: User[];
  status: 200;
};

export type getUsersResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getUsersResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getUsersResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getUsersResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getUsersResponseComposite =
  | getUsersResponse200
  | getUsersResponse400
  | getUsersResponse401
  | getUsersResponse402
  | getUsersResponse500;

export type getUsersResponse = getUsersResponseComposite & {
  headers: Headers;
};

export const getGetUsersUrl = () => {
  return `https://admin-api.docs.keitaro.io/users`;
};

export const getUsers = async (
  options?: RequestInit,
): Promise<getUsersResponse> => {
  return fetcher<getUsersResponse>(getGetUsersUrl(), {
    ...options,
    method: 'GET',
  });
};

/**
 * Creates user
 * @summary Create user
 */
export type postUsersResponse200 = {
  data: User;
  status: 200;
};

export type postUsersResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postUsersResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postUsersResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postUsersResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postUsersResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postUsersResponseComposite =
  | postUsersResponse200
  | postUsersResponse400
  | postUsersResponse401
  | postUsersResponse402
  | postUsersResponse406
  | postUsersResponse500;

export type postUsersResponse = postUsersResponseComposite & {
  headers: Headers;
};

export const getPostUsersUrl = () => {
  return `https://admin-api.docs.keitaro.io/users`;
};

export const postUsers = async (
  userRequest: UserRequest,
  options?: RequestInit,
): Promise<postUsersResponse> => {
  return fetcher<postUsersResponse>(getPostUsersUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(userRequest),
  });
};

/**
 * Returns user details.
 * @summary Get user
 */
export type getUsersIdResponse200 = {
  data: User;
  status: 200;
};

export type getUsersIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getUsersIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getUsersIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getUsersIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type getUsersIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getUsersIdResponseComposite =
  | getUsersIdResponse200
  | getUsersIdResponse400
  | getUsersIdResponse401
  | getUsersIdResponse402
  | getUsersIdResponse404
  | getUsersIdResponse500;

export type getUsersIdResponse = getUsersIdResponseComposite & {
  headers: Headers;
};

export const getGetUsersIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/users/${id}`;
};

export const getUsersId = async (
  id: number,
  options?: RequestInit,
): Promise<getUsersIdResponse> => {
  return fetcher<getUsersIdResponse>(getGetUsersIdUrl(id), {
    ...options,
    method: 'GET',
  });
};

/**
 * Updates user.
 * @summary Update user
 */
export type putUsersIdResponse200 = {
  data: User;
  status: 200;
};

export type putUsersIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type putUsersIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type putUsersIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type putUsersIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type putUsersIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type putUsersIdResponseComposite =
  | putUsersIdResponse200
  | putUsersIdResponse400
  | putUsersIdResponse401
  | putUsersIdResponse402
  | putUsersIdResponse404
  | putUsersIdResponse500;

export type putUsersIdResponse = putUsersIdResponseComposite & {
  headers: Headers;
};

export const getPutUsersIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/users/${id}`;
};

export const putUsersId = async (
  id: number,
  userRequestUpdate: UserRequestUpdate,
  options?: RequestInit,
): Promise<putUsersIdResponse> => {
  return fetcher<putUsersIdResponse>(getPutUsersIdUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(userRequestUpdate),
  });
};

/**
 * Deletes user. Cannot be reverted.
 * @summary Delete user
 */
export type deleteUsersIdResponse201 = {
  data: void;
  status: 201;
};

export type deleteUsersIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type deleteUsersIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type deleteUsersIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type deleteUsersIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type deleteUsersIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type deleteUsersIdResponseComposite =
  | deleteUsersIdResponse201
  | deleteUsersIdResponse400
  | deleteUsersIdResponse401
  | deleteUsersIdResponse402
  | deleteUsersIdResponse404
  | deleteUsersIdResponse500;

export type deleteUsersIdResponse = deleteUsersIdResponseComposite & {
  headers: Headers;
};

export const getDeleteUsersIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/users/${id}`;
};

export const deleteUsersId = async (
  id: number,
  options?: RequestInit,
): Promise<deleteUsersIdResponse> => {
  return fetcher<deleteUsersIdResponse>(getDeleteUsersIdUrl(id), {
    ...options,
    method: 'DELETE',
  });
};

/**
 * Updates access for user.
 * @summary Update access
 */
export type putUsersIdAccessResponse200 = {
  data: User;
  status: 200;
};

export type putUsersIdAccessResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type putUsersIdAccessResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type putUsersIdAccessResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type putUsersIdAccessResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type putUsersIdAccessResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type putUsersIdAccessResponseComposite =
  | putUsersIdAccessResponse200
  | putUsersIdAccessResponse400
  | putUsersIdAccessResponse401
  | putUsersIdAccessResponse402
  | putUsersIdAccessResponse404
  | putUsersIdAccessResponse500;

export type putUsersIdAccessResponse = putUsersIdAccessResponseComposite & {
  headers: Headers;
};

export const getPutUsersIdAccessUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/users/${id}/access`;
};

export const putUsersIdAccess = async (
  id: number,
  userRequestAccess: UserRequestAccess,
  options?: RequestInit,
): Promise<putUsersIdAccessResponse> => {
  return fetcher<putUsersIdAccessResponse>(getPutUsersIdAccessUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(userRequestAccess),
  });
};

/**
 * Clean archive
 * @summary Clean archive
 */
export type postUsersCleanArchiveResponse200 = {
  data: void;
  status: 200;
};

export type postUsersCleanArchiveResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postUsersCleanArchiveResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postUsersCleanArchiveResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postUsersCleanArchiveResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postUsersCleanArchiveResponseComposite =
  | postUsersCleanArchiveResponse200
  | postUsersCleanArchiveResponse400
  | postUsersCleanArchiveResponse401
  | postUsersCleanArchiveResponse402
  | postUsersCleanArchiveResponse500;

export type postUsersCleanArchiveResponse =
  postUsersCleanArchiveResponseComposite & {
    headers: Headers;
  };

export const getPostUsersCleanArchiveUrl = () => {
  return `https://admin-api.docs.keitaro.io/users/clean_archive`;
};

export const postUsersCleanArchive = async (
  options?: RequestInit,
): Promise<postUsersCleanArchiveResponse> => {
  return fetcher<postUsersCleanArchiveResponse>(getPostUsersCleanArchiveUrl(), {
    ...options,
    method: 'POST',
  });
};
