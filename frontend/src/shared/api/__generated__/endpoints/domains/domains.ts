/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Keitaro Admin API
 * OpenAPI spec version: v1
 */
import type {
  BadRequestResponse,
  Domain,
  DomainRequest,
  GetDomainsIp200,
  InternalErrorResponse,
  NotAcceptableResponse,
  NotFoundResponse,
  PaymentRequiredResponse,
  PostDomainsBody,
  PostDomainsRegister200,
  PostDomainsRegisterBody,
  UnauthorizedResponse,
  UnprocessableEntityResponse,
} from '../../models';

import { fetcher } from '../../../utils/fetcher';

/**
 * Returns list of the domains
 * @summary Get the list of domains
 */
export type getDomainsResponse200 = {
  data: Domain[];
  status: 200;
};

export type getDomainsResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getDomainsResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getDomainsResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getDomainsResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getDomainsResponseComposite =
  | getDomainsResponse200
  | getDomainsResponse400
  | getDomainsResponse401
  | getDomainsResponse402
  | getDomainsResponse500;

export type getDomainsResponse = getDomainsResponseComposite & {
  headers: Headers;
};

export const getGetDomainsUrl = () => {
  return `https://admin-api.docs.keitaro.io/domains`;
};

export const getDomains = async (
  options?: RequestInit,
): Promise<getDomainsResponse> => {
  return fetcher<getDomainsResponse>(getGetDomainsUrl(), {
    ...options,
    method: 'GET',
  });
};

/**
 * Create a domain
 * @summary Create domain
 */
export type postDomainsResponse200 = {
  data: Domain[];
  status: 200;
};

export type postDomainsResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postDomainsResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postDomainsResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postDomainsResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postDomainsResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postDomainsResponseComposite =
  | postDomainsResponse200
  | postDomainsResponse400
  | postDomainsResponse401
  | postDomainsResponse402
  | postDomainsResponse406
  | postDomainsResponse500;

export type postDomainsResponse = postDomainsResponseComposite & {
  headers: Headers;
};

export const getPostDomainsUrl = () => {
  return `https://admin-api.docs.keitaro.io/domains`;
};

export const postDomains = async (
  postDomainsBody: PostDomainsBody,
  options?: RequestInit,
): Promise<postDomainsResponse> => {
  return fetcher<postDomainsResponse>(getPostDomainsUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postDomainsBody),
  });
};

/**
 * Return domain details.
 * @summary Get domain
 */
export type getDomainsIdResponse200 = {
  data: Domain;
  status: 200;
};

export type getDomainsIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getDomainsIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getDomainsIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getDomainsIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type getDomainsIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getDomainsIdResponseComposite =
  | getDomainsIdResponse200
  | getDomainsIdResponse400
  | getDomainsIdResponse401
  | getDomainsIdResponse402
  | getDomainsIdResponse404
  | getDomainsIdResponse500;

export type getDomainsIdResponse = getDomainsIdResponseComposite & {
  headers: Headers;
};

export const getGetDomainsIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/domains/${id}`;
};

export const getDomainsId = async (
  id: number,
  options?: RequestInit,
): Promise<getDomainsIdResponse> => {
  return fetcher<getDomainsIdResponse>(getGetDomainsIdUrl(id), {
    ...options,
    method: 'GET',
  });
};

/**
 * Updates domain.
 * @summary Update domain
 */
export type putDomainsIdResponse200 = {
  data: Domain;
  status: 200;
};

export type putDomainsIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type putDomainsIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type putDomainsIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type putDomainsIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type putDomainsIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type putDomainsIdResponseComposite =
  | putDomainsIdResponse200
  | putDomainsIdResponse400
  | putDomainsIdResponse401
  | putDomainsIdResponse402
  | putDomainsIdResponse404
  | putDomainsIdResponse500;

export type putDomainsIdResponse = putDomainsIdResponseComposite & {
  headers: Headers;
};

export const getPutDomainsIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/domains/${id}`;
};

export const putDomainsId = async (
  id: number,
  domainRequest: DomainRequest,
  options?: RequestInit,
): Promise<putDomainsIdResponse> => {
  return fetcher<putDomainsIdResponse>(getPutDomainsIdUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(domainRequest),
  });
};

/**
 * Move a Domain to Archive
 * @summary Move Domain to Archive
 */
export type deleteDomainsIdResponse201 = {
  data: Domain;
  status: 201;
};

export type deleteDomainsIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type deleteDomainsIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type deleteDomainsIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type deleteDomainsIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type deleteDomainsIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type deleteDomainsIdResponseComposite =
  | deleteDomainsIdResponse201
  | deleteDomainsIdResponse400
  | deleteDomainsIdResponse401
  | deleteDomainsIdResponse402
  | deleteDomainsIdResponse404
  | deleteDomainsIdResponse500;

export type deleteDomainsIdResponse = deleteDomainsIdResponseComposite & {
  headers: Headers;
};

export const getDeleteDomainsIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/domains/${id}`;
};

export const deleteDomainsId = async (
  id: number,
  options?: RequestInit,
): Promise<deleteDomainsIdResponse> => {
  return fetcher<deleteDomainsIdResponse>(getDeleteDomainsIdUrl(id), {
    ...options,
    method: 'DELETE',
  });
};

/**
 * Update Domain Status
 * @summary Update Domain Status
 */
export type postDomainsIdCheckResponse200 = {
  data: Domain;
  status: 200;
};

export type postDomainsIdCheckResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postDomainsIdCheckResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postDomainsIdCheckResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postDomainsIdCheckResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postDomainsIdCheckResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postDomainsIdCheckResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postDomainsIdCheckResponseComposite =
  | postDomainsIdCheckResponse200
  | postDomainsIdCheckResponse400
  | postDomainsIdCheckResponse401
  | postDomainsIdCheckResponse402
  | postDomainsIdCheckResponse404
  | postDomainsIdCheckResponse406
  | postDomainsIdCheckResponse500;

export type postDomainsIdCheckResponse = postDomainsIdCheckResponseComposite & {
  headers: Headers;
};

export const getPostDomainsIdCheckUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/domains/${id}/check`;
};

export const postDomainsIdCheck = async (
  id: number,
  options?: RequestInit,
): Promise<postDomainsIdCheckResponse> => {
  return fetcher<postDomainsIdCheckResponse>(getPostDomainsIdCheckUrl(id), {
    ...options,
    method: 'POST',
  });
};

/**
 * Restore an Archived Domain
 * @summary Restore an Archived Domain
 */
export type postDomainsIdRestoreResponse200 = {
  data: Domain;
  status: 200;
};

export type postDomainsIdRestoreResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postDomainsIdRestoreResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postDomainsIdRestoreResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postDomainsIdRestoreResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postDomainsIdRestoreResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postDomainsIdRestoreResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postDomainsIdRestoreResponseComposite =
  | postDomainsIdRestoreResponse200
  | postDomainsIdRestoreResponse400
  | postDomainsIdRestoreResponse401
  | postDomainsIdRestoreResponse402
  | postDomainsIdRestoreResponse404
  | postDomainsIdRestoreResponse406
  | postDomainsIdRestoreResponse500;

export type postDomainsIdRestoreResponse =
  postDomainsIdRestoreResponseComposite & {
    headers: Headers;
  };

export const getPostDomainsIdRestoreUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/domains/${id}/restore`;
};

export const postDomainsIdRestore = async (
  id: number,
  options?: RequestInit,
): Promise<postDomainsIdRestoreResponse> => {
  return fetcher<postDomainsIdRestoreResponse>(getPostDomainsIdRestoreUrl(id), {
    ...options,
    method: 'POST',
  });
};

/**
 * Clean archive
 * @summary Clean archive
 */
export type postDomainsCleanArchiveResponse200 = {
  data: void;
  status: 200;
};

export type postDomainsCleanArchiveResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postDomainsCleanArchiveResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postDomainsCleanArchiveResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postDomainsCleanArchiveResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postDomainsCleanArchiveResponseComposite =
  | postDomainsCleanArchiveResponse200
  | postDomainsCleanArchiveResponse400
  | postDomainsCleanArchiveResponse401
  | postDomainsCleanArchiveResponse402
  | postDomainsCleanArchiveResponse500;

export type postDomainsCleanArchiveResponse =
  postDomainsCleanArchiveResponseComposite & {
    headers: Headers;
  };

export const getPostDomainsCleanArchiveUrl = () => {
  return `https://admin-api.docs.keitaro.io/domains/clean_archive`;
};

export const postDomainsCleanArchive = async (
  options?: RequestInit,
): Promise<postDomainsCleanArchiveResponse> => {
  return fetcher<postDomainsCleanArchiveResponse>(
    getPostDomainsCleanArchiveUrl(),
    {
      ...options,
      method: 'POST',
    },
  );
};

/**
 * Returns list of the domains.
 * @summary Get deleted domains
 */
export type getDomainsDeletedResponse200 = {
  data: Domain[];
  status: 200;
};

export type getDomainsDeletedResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getDomainsDeletedResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getDomainsDeletedResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getDomainsDeletedResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getDomainsDeletedResponseComposite =
  | getDomainsDeletedResponse200
  | getDomainsDeletedResponse400
  | getDomainsDeletedResponse401
  | getDomainsDeletedResponse402
  | getDomainsDeletedResponse500;

export type getDomainsDeletedResponse = getDomainsDeletedResponseComposite & {
  headers: Headers;
};

export const getGetDomainsDeletedUrl = () => {
  return `https://admin-api.docs.keitaro.io/domains/deleted`;
};

export const getDomainsDeleted = async (
  options?: RequestInit,
): Promise<getDomainsDeletedResponse> => {
  return fetcher<getDomainsDeletedResponse>(getGetDomainsDeletedUrl(), {
    ...options,
    method: 'GET',
  });
};

/**
 * Retrieve server ip
 * @summary Retrieve server ip
 */
export type getDomainsIpResponse200 = {
  data: GetDomainsIp200;
  status: 200;
};

export type getDomainsIpResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getDomainsIpResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getDomainsIpResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getDomainsIpResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getDomainsIpResponseComposite =
  | getDomainsIpResponse200
  | getDomainsIpResponse400
  | getDomainsIpResponse401
  | getDomainsIpResponse402
  | getDomainsIpResponse500;

export type getDomainsIpResponse = getDomainsIpResponseComposite & {
  headers: Headers;
};

export const getGetDomainsIpUrl = () => {
  return `https://admin-api.docs.keitaro.io/domains/ip`;
};

export const getDomainsIp = async (
  options?: RequestInit,
): Promise<getDomainsIpResponse> => {
  return fetcher<getDomainsIpResponse>(getGetDomainsIpUrl(), {
    ...options,
    method: 'GET',
  });
};

/**
 * <p>Register the domain</p> <b>IMPORTANT!</b> You should have installed integration with namecheap and, optional, with cloudflare (if you want to add zone to cloudflare via cloudflare_proxy param)
 * @summary Register the domain
 */
export type postDomainsRegisterResponse200 = {
  data: PostDomainsRegister200;
  status: 200;
};

export type postDomainsRegisterResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postDomainsRegisterResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postDomainsRegisterResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postDomainsRegisterResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postDomainsRegisterResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postDomainsRegisterResponse422 = {
  data: UnprocessableEntityResponse;
  status: 422;
};

export type postDomainsRegisterResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postDomainsRegisterResponseComposite =
  | postDomainsRegisterResponse200
  | postDomainsRegisterResponse400
  | postDomainsRegisterResponse401
  | postDomainsRegisterResponse402
  | postDomainsRegisterResponse404
  | postDomainsRegisterResponse406
  | postDomainsRegisterResponse422
  | postDomainsRegisterResponse500;

export type postDomainsRegisterResponse =
  postDomainsRegisterResponseComposite & {
    headers: Headers;
  };

export const getPostDomainsRegisterUrl = () => {
  return `https://admin-api.docs.keitaro.io/domains/register`;
};

export const postDomainsRegister = async (
  postDomainsRegisterBody: PostDomainsRegisterBody,
  options?: RequestInit,
): Promise<postDomainsRegisterResponse> => {
  return fetcher<postDomainsRegisterResponse>(getPostDomainsRegisterUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postDomainsRegisterBody),
  });
};
