/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keitaro Admin API
 * OpenAPI spec version: v1
 */
import { z as zod } from 'zod';

import { fetcher } from '../../../utils/fetcher';

/**
 * Returns list of the domains
 * @summary Get the list of domains
 */
export const getDomainsResponseStateDefault = 'active';

export const getDomainsResponseItem = zod.object({
  id: zod.number().optional(),
  name: zod.string().optional(),
  network_status: zod.string().optional(),
  default_campaign: zod.string().optional(),
  default_campaign_id: zod.number().optional(),
  state: zod
    .enum(['active', 'deleted'])
    .default(getDomainsResponseStateDefault),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  catch_not_found: zod.boolean().optional(),
  campaigns_count: zod.number().optional(),
  ssl_redirect: zod.boolean().optional(),
  allow_indexing: zod.boolean().optional(),
  admin_dashboard: zod.boolean().optional(),
  cloudflare_proxy: zod.boolean().optional(),
  group_id: zod.number().optional(),
  group: zod.string().optional(),
  is_ssl: zod.boolean().optional(),
  dns_provider: zod.string().optional(),
  error_solution: zod.string().optional(),
  status: zod.string().optional(),
});
export const getDomainsResponse = zod.array(getDomainsResponseItem);

/**
 * Create a domain
 * @summary Create domain
 */
export const postDomainsBodyCatchNotFoundDefault = false;
export const postDomainsBodySslRedirectDefault = false;
export const postDomainsBodyAllowIndexingDefault = true;
export const postDomainsBodyAdminDashboardDefault = false;

export const postDomainsBody = zod
  .object({
    name: zod.string().optional().describe('Domain name'),
    default_campaign_id: zod
      .number()
      .optional()
      .describe('Run campaign on the domain'),
    group_id: zod.string().optional().describe('Group ID'),
    catch_not_found: zod
      .boolean()
      .optional()
      .describe('Catch the traffic of non-existent URLs'),
    notes: zod.string().optional().describe('Notes for the domain'),
    ssl_redirect: zod
      .boolean()
      .optional()
      .describe('Force browsers to redirect from HTTP to HTTPS'),
    allow_indexing: zod
      .boolean()
      .default(postDomainsBodyAllowIndexingDefault)
      .describe('Allow robots to index the domain content'),
    admin_dashboard: zod
      .boolean()
      .optional()
      .describe('Allow access to admin dashboard'),
  })
  .and(zod.any());

export const postDomainsResponseStateDefault = 'active';

export const postDomainsResponseItem = zod.object({
  id: zod.number().optional(),
  name: zod.string().optional(),
  network_status: zod.string().optional(),
  default_campaign: zod.string().optional(),
  default_campaign_id: zod.number().optional(),
  state: zod
    .enum(['active', 'deleted'])
    .default(postDomainsResponseStateDefault),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  catch_not_found: zod.boolean().optional(),
  campaigns_count: zod.number().optional(),
  ssl_redirect: zod.boolean().optional(),
  allow_indexing: zod.boolean().optional(),
  admin_dashboard: zod.boolean().optional(),
  cloudflare_proxy: zod.boolean().optional(),
  group_id: zod.number().optional(),
  group: zod.string().optional(),
  is_ssl: zod.boolean().optional(),
  dns_provider: zod.string().optional(),
  error_solution: zod.string().optional(),
  status: zod.string().optional(),
});
export const postDomainsResponse = zod.array(postDomainsResponseItem);

/**
 * Return domain details.
 * @summary Get domain
 */
export const getDomainsIdParams = zod.object({
  id: zod.number().describe('Domain ID'),
});

export const getDomainsIdResponseStateDefault = 'active';

export const getDomainsIdResponse = zod.object({
  id: zod.number().optional(),
  name: zod.string().optional(),
  network_status: zod.string().optional(),
  default_campaign: zod.string().optional(),
  default_campaign_id: zod.number().optional(),
  state: zod
    .enum(['active', 'deleted'])
    .default(getDomainsIdResponseStateDefault),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  catch_not_found: zod.boolean().optional(),
  campaigns_count: zod.number().optional(),
  ssl_redirect: zod.boolean().optional(),
  allow_indexing: zod.boolean().optional(),
  admin_dashboard: zod.boolean().optional(),
  cloudflare_proxy: zod.boolean().optional(),
  group_id: zod.number().optional(),
  group: zod.string().optional(),
  is_ssl: zod.boolean().optional(),
  dns_provider: zod.string().optional(),
  error_solution: zod.string().optional(),
  status: zod.string().optional(),
});

/**
 * Updates domain.
 * @summary Update domain
 */
export const putDomainsIdParams = zod.object({
  id: zod.number().describe('Domain ID'),
});

export const putDomainsIdBodyCatchNotFoundDefault = false;
export const putDomainsIdBodySslRedirectDefault = false;
export const putDomainsIdBodyAllowIndexingDefault = true;
export const putDomainsIdBodyAdminDashboardDefault = false;

export const putDomainsIdBody = zod.object({
  name: zod.string().optional().describe('Domain name'),
  default_campaign_id: zod
    .number()
    .optional()
    .describe('Run campaign on the domain'),
  group_id: zod.string().optional().describe('Group ID'),
  catch_not_found: zod
    .boolean()
    .optional()
    .describe('Catch the traffic of non-existent URLs'),
  notes: zod.string().optional().describe('Notes for the domain'),
  ssl_redirect: zod
    .boolean()
    .optional()
    .describe('Force browsers to redirect from HTTP to HTTPS'),
  allow_indexing: zod
    .boolean()
    .default(putDomainsIdBodyAllowIndexingDefault)
    .describe('Allow robots to index the domain content'),
  admin_dashboard: zod
    .boolean()
    .optional()
    .describe('Allow access to admin dashboard'),
});

export const putDomainsIdResponseStateDefault = 'active';

export const putDomainsIdResponse = zod.object({
  id: zod.number().optional(),
  name: zod.string().optional(),
  network_status: zod.string().optional(),
  default_campaign: zod.string().optional(),
  default_campaign_id: zod.number().optional(),
  state: zod
    .enum(['active', 'deleted'])
    .default(putDomainsIdResponseStateDefault),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  catch_not_found: zod.boolean().optional(),
  campaigns_count: zod.number().optional(),
  ssl_redirect: zod.boolean().optional(),
  allow_indexing: zod.boolean().optional(),
  admin_dashboard: zod.boolean().optional(),
  cloudflare_proxy: zod.boolean().optional(),
  group_id: zod.number().optional(),
  group: zod.string().optional(),
  is_ssl: zod.boolean().optional(),
  dns_provider: zod.string().optional(),
  error_solution: zod.string().optional(),
  status: zod.string().optional(),
});

/**
 * Move a Domain to Archive
 * @summary Move Domain to Archive
 */
export const deleteDomainsIdParams = zod.object({
  id: zod.number().describe('Domain ID'),
});

/**
 * Update Domain Status
 * @summary Update Domain Status
 */
export const postDomainsIdCheckParams = zod.object({
  id: zod.number().describe('Domain ID'),
});

export const postDomainsIdCheckResponseStateDefault = 'active';

export const postDomainsIdCheckResponse = zod.object({
  id: zod.number().optional(),
  name: zod.string().optional(),
  network_status: zod.string().optional(),
  default_campaign: zod.string().optional(),
  default_campaign_id: zod.number().optional(),
  state: zod
    .enum(['active', 'deleted'])
    .default(postDomainsIdCheckResponseStateDefault),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  catch_not_found: zod.boolean().optional(),
  campaigns_count: zod.number().optional(),
  ssl_redirect: zod.boolean().optional(),
  allow_indexing: zod.boolean().optional(),
  admin_dashboard: zod.boolean().optional(),
  cloudflare_proxy: zod.boolean().optional(),
  group_id: zod.number().optional(),
  group: zod.string().optional(),
  is_ssl: zod.boolean().optional(),
  dns_provider: zod.string().optional(),
  error_solution: zod.string().optional(),
  status: zod.string().optional(),
});

/**
 * Restore an Archived Domain
 * @summary Restore an Archived Domain
 */
export const postDomainsIdRestoreParams = zod.object({
  id: zod.number().describe('Domain ID'),
});

export const postDomainsIdRestoreResponseStateDefault = 'active';

export const postDomainsIdRestoreResponse = zod.object({
  id: zod.number().optional(),
  name: zod.string().optional(),
  network_status: zod.string().optional(),
  default_campaign: zod.string().optional(),
  default_campaign_id: zod.number().optional(),
  state: zod
    .enum(['active', 'deleted'])
    .default(postDomainsIdRestoreResponseStateDefault),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  catch_not_found: zod.boolean().optional(),
  campaigns_count: zod.number().optional(),
  ssl_redirect: zod.boolean().optional(),
  allow_indexing: zod.boolean().optional(),
  admin_dashboard: zod.boolean().optional(),
  cloudflare_proxy: zod.boolean().optional(),
  group_id: zod.number().optional(),
  group: zod.string().optional(),
  is_ssl: zod.boolean().optional(),
  dns_provider: zod.string().optional(),
  error_solution: zod.string().optional(),
  status: zod.string().optional(),
});

/**
 * Returns list of the domains.
 * @summary Get deleted domains
 */
export const getDomainsDeletedResponseStateDefault = 'active';

export const getDomainsDeletedResponseItem = zod.object({
  id: zod.number().optional(),
  name: zod.string().optional(),
  network_status: zod.string().optional(),
  default_campaign: zod.string().optional(),
  default_campaign_id: zod.number().optional(),
  state: zod
    .enum(['active', 'deleted'])
    .default(getDomainsDeletedResponseStateDefault),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  catch_not_found: zod.boolean().optional(),
  campaigns_count: zod.number().optional(),
  ssl_redirect: zod.boolean().optional(),
  allow_indexing: zod.boolean().optional(),
  admin_dashboard: zod.boolean().optional(),
  cloudflare_proxy: zod.boolean().optional(),
  group_id: zod.number().optional(),
  group: zod.string().optional(),
  is_ssl: zod.boolean().optional(),
  dns_provider: zod.string().optional(),
  error_solution: zod.string().optional(),
  status: zod.string().optional(),
});
export const getDomainsDeletedResponse = zod.array(
  getDomainsDeletedResponseItem
);

/**
 * Retrieve server ip
 * @summary Retrieve server ip
 */
export const getDomainsIpResponse = zod.object({
  ipv4: zod.string().optional().describe('IPv4 address'),
  ipv6: zod.string().optional().describe('IPv6 address'),
});

/**
 * <p>Register the domain</p> <b>IMPORTANT!</b> You should have installed integration with namecheap and, optional, with cloudflare (if you want to add zone to cloudflare via cloudflare_proxy param)
 * @summary Register the domain
 */
export const postDomainsRegisterBodyCatchNotFoundDefault = false;
export const postDomainsRegisterBodySslRedirectDefault = false;
export const postDomainsRegisterBodyAllowIndexingDefault = true;
export const postDomainsRegisterBodyAdminDashboardDefault = false;

export const postDomainsRegisterBody = zod
  .object({
    name: zod.string().optional().describe('Domain name'),
    default_campaign_id: zod
      .number()
      .optional()
      .describe('Run campaign on the domain'),
    group_id: zod.string().optional().describe('Group ID'),
    catch_not_found: zod
      .boolean()
      .optional()
      .describe('Catch the traffic of non-existent URLs'),
    notes: zod.string().optional().describe('Notes for the domain'),
    ssl_redirect: zod
      .boolean()
      .optional()
      .describe('Force browsers to redirect from HTTP to HTTPS'),
    allow_indexing: zod
      .boolean()
      .default(postDomainsRegisterBodyAllowIndexingDefault)
      .describe('Allow robots to index the domain content'),
    admin_dashboard: zod
      .boolean()
      .optional()
      .describe('Allow access to admin dashboard'),
  })
  .and(zod.any());

export const postDomainsRegisterResponseStateDefault = 'active';

export const postDomainsRegisterResponse = zod
  .object({
    id: zod.number().optional(),
    name: zod.string().optional(),
    network_status: zod.string().optional(),
    default_campaign: zod.string().optional(),
    default_campaign_id: zod.number().optional(),
    state: zod
      .enum(['active', 'deleted'])
      .default(postDomainsRegisterResponseStateDefault),
    created_at: zod.string().optional(),
    updated_at: zod.string().optional(),
    catch_not_found: zod.boolean().optional(),
    campaigns_count: zod.number().optional(),
    ssl_redirect: zod.boolean().optional(),
    allow_indexing: zod.boolean().optional(),
    admin_dashboard: zod.boolean().optional(),
    cloudflare_proxy: zod.boolean().optional(),
    group_id: zod.number().optional(),
    group: zod.string().optional(),
    is_ssl: zod.boolean().optional(),
    dns_provider: zod.string().optional(),
    error_solution: zod.string().optional(),
    status: zod.string().optional(),
  })
  .and(
    zod.object({
      registrar: zod.string().optional(),
      external_id: zod.number().optional(),
    })
  );
