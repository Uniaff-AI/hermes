/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Keitaro Admin API
 * OpenAPI spec version: v1
 */
import type {
  BadRequestResponse,
  GetGroupsParams,
  Group,
  GroupRequest,
  InternalErrorResponse,
  NotAcceptableResponse,
  NotFoundResponse,
  PaymentRequiredResponse,
  PostGroupsBody,
  UnauthorizedResponse,
} from '../../models';

import { fetcher } from '../../../utils/fetcher';

/**
 * Returns list of the groups
 * @summary Get groups
 */
export type getGroupsResponse200 = {
  data: Group[];
  status: 200;
};

export type getGroupsResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getGroupsResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getGroupsResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getGroupsResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getGroupsResponseComposite =
  | getGroupsResponse200
  | getGroupsResponse400
  | getGroupsResponse401
  | getGroupsResponse402
  | getGroupsResponse500;

export type getGroupsResponse = getGroupsResponseComposite & {
  headers: Headers;
};

export const getGetGroupsUrl = (params: GetGroupsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://admin-api.docs.keitaro.io/groups?${stringifiedParams}`
    : `https://admin-api.docs.keitaro.io/groups`;
};

export const getGroups = async (
  params: GetGroupsParams,
  options?: RequestInit,
): Promise<getGroupsResponse> => {
  return fetcher<getGroupsResponse>(getGetGroupsUrl(params), {
    ...options,
    method: 'GET',
  });
};

/**
 * Creates group.
 * @summary Create croup
 */
export type postGroupsResponse200 = {
  data: Group;
  status: 200;
};

export type postGroupsResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postGroupsResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postGroupsResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postGroupsResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postGroupsResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postGroupsResponseComposite =
  | postGroupsResponse200
  | postGroupsResponse400
  | postGroupsResponse401
  | postGroupsResponse402
  | postGroupsResponse406
  | postGroupsResponse500;

export type postGroupsResponse = postGroupsResponseComposite & {
  headers: Headers;
};

export const getPostGroupsUrl = () => {
  return `https://admin-api.docs.keitaro.io/groups`;
};

export const postGroups = async (
  postGroupsBody: PostGroupsBody,
  options?: RequestInit,
): Promise<postGroupsResponse> => {
  return fetcher<postGroupsResponse>(getPostGroupsUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postGroupsBody),
  });
};

/**
 * Update a Group
 * @summary Update Group
 */
export type putGroupsIdResponse200 = {
  data: Group;
  status: 200;
};

export type putGroupsIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type putGroupsIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type putGroupsIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type putGroupsIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type putGroupsIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type putGroupsIdResponseComposite =
  | putGroupsIdResponse200
  | putGroupsIdResponse400
  | putGroupsIdResponse401
  | putGroupsIdResponse402
  | putGroupsIdResponse404
  | putGroupsIdResponse500;

export type putGroupsIdResponse = putGroupsIdResponseComposite & {
  headers: Headers;
};

export const getPutGroupsIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/groups/${id}`;
};

export const putGroupsId = async (
  id: number,
  groupRequest: GroupRequest,
  options?: RequestInit,
): Promise<putGroupsIdResponse> => {
  return fetcher<putGroupsIdResponse>(getPutGroupsIdUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(groupRequest),
  });
};

/**
 * Delete a Group
 * @summary Delete Group
 */
export type deleteGroupsIdDeleteResponse200 = {
  data: Group;
  status: 200;
};

export type deleteGroupsIdDeleteResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type deleteGroupsIdDeleteResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type deleteGroupsIdDeleteResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type deleteGroupsIdDeleteResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type deleteGroupsIdDeleteResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type deleteGroupsIdDeleteResponseComposite =
  | deleteGroupsIdDeleteResponse200
  | deleteGroupsIdDeleteResponse400
  | deleteGroupsIdDeleteResponse401
  | deleteGroupsIdDeleteResponse402
  | deleteGroupsIdDeleteResponse404
  | deleteGroupsIdDeleteResponse500;

export type deleteGroupsIdDeleteResponse =
  deleteGroupsIdDeleteResponseComposite & {
    headers: Headers;
  };

export const getDeleteGroupsIdDeleteUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/groups/${id}/delete`;
};

export const deleteGroupsIdDelete = async (
  id: number,
  options?: RequestInit,
): Promise<deleteGroupsIdDeleteResponse> => {
  return fetcher<deleteGroupsIdDeleteResponse>(getDeleteGroupsIdDeleteUrl(id), {
    ...options,
    method: 'DELETE',
  });
};
