/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Keitaro Admin API
 * OpenAPI spec version: v1
 */
import type {
  BadRequestResponse,
  DeleteOffersIdRemoveFile200,
  DeleteOffersIdRemoveFileParams,
  EditorFiles,
  Error,
  GetOffersIdGetFile200,
  GetOffersIdGetFileParams,
  InternalErrorResponse,
  NotAcceptableResponse,
  NotFoundResponse,
  Offer,
  OfferRequest,
  PaymentRequiredResponse,
  PostOffersBody,
  PostOffersIdAddFile200,
  PostOffersIdAddFileParams,
  PutOffersIdUpdateFile200,
  PutOffersIdUpdateFileParams,
  UnauthorizedResponse,
} from '../../models';

import { fetcher } from '../../../utils/fetcher';

/**
 * Returns list of the offers
 * @summary Get offers
 */
export type getOffersResponse200 = {
  data: Offer[];
  status: 200;
};

export type getOffersResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getOffersResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getOffersResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getOffersResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getOffersResponseComposite =
  | getOffersResponse200
  | getOffersResponse400
  | getOffersResponse401
  | getOffersResponse402
  | getOffersResponse500;

export type getOffersResponse = getOffersResponseComposite & {
  headers: Headers;
};

export const getGetOffersUrl = () => {
  return `https://admin-api.docs.keitaro.io/offers`;
};

export const getOffers = async (
  options?: RequestInit,
): Promise<getOffersResponse> => {
  return fetcher<getOffersResponse>(getGetOffersUrl(), {
    ...options,
    method: 'GET',
  });
};

/**
 * Creates offer
 * @summary Create offer
 */
export type postOffersResponse200 = {
  data: Offer;
  status: 200;
};

export type postOffersResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postOffersResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postOffersResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postOffersResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postOffersResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postOffersResponseComposite =
  | postOffersResponse200
  | postOffersResponse400
  | postOffersResponse401
  | postOffersResponse402
  | postOffersResponse406
  | postOffersResponse500;

export type postOffersResponse = postOffersResponseComposite & {
  headers: Headers;
};

export const getPostOffersUrl = () => {
  return `https://admin-api.docs.keitaro.io/offers`;
};

export const postOffers = async (
  postOffersBody: PostOffersBody,
  options?: RequestInit,
): Promise<postOffersResponse> => {
  return fetcher<postOffersResponse>(getPostOffersUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postOffersBody),
  });
};

/**
 * Returns offer
 * @summary Get offer
 */
export type getOffersIdResponse200 = {
  data: Offer;
  status: 200;
};

export type getOffersIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getOffersIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getOffersIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getOffersIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type getOffersIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getOffersIdResponseComposite =
  | getOffersIdResponse200
  | getOffersIdResponse400
  | getOffersIdResponse401
  | getOffersIdResponse402
  | getOffersIdResponse404
  | getOffersIdResponse500;

export type getOffersIdResponse = getOffersIdResponseComposite & {
  headers: Headers;
};

export const getGetOffersIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/offers/${id}`;
};

export const getOffersId = async (
  id: number,
  options?: RequestInit,
): Promise<getOffersIdResponse> => {
  return fetcher<getOffersIdResponse>(getGetOffersIdUrl(id), {
    ...options,
    method: 'GET',
  });
};

/**
 * Updates offer
 * @summary Update offer
 */
export type putOffersIdResponse200 = {
  data: Offer;
  status: 200;
};

export type putOffersIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type putOffersIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type putOffersIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type putOffersIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type putOffersIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type putOffersIdResponseComposite =
  | putOffersIdResponse200
  | putOffersIdResponse400
  | putOffersIdResponse401
  | putOffersIdResponse402
  | putOffersIdResponse404
  | putOffersIdResponse500;

export type putOffersIdResponse = putOffersIdResponseComposite & {
  headers: Headers;
};

export const getPutOffersIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/offers/${id}`;
};

export const putOffersId = async (
  id: number,
  offerRequest: OfferRequest,
  options?: RequestInit,
): Promise<putOffersIdResponse> => {
  return fetcher<putOffersIdResponse>(getPutOffersIdUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(offerRequest),
  });
};

/**
 * Create the File of the Local Offer
 * @summary Create file
 */
export type postOffersIdAddFileResponse200 = {
  data: PostOffersIdAddFile200;
  status: 200;
};

export type postOffersIdAddFileResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postOffersIdAddFileResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postOffersIdAddFileResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postOffersIdAddFileResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postOffersIdAddFileResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postOffersIdAddFileResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postOffersIdAddFileResponseComposite =
  | postOffersIdAddFileResponse200
  | postOffersIdAddFileResponse400
  | postOffersIdAddFileResponse401
  | postOffersIdAddFileResponse402
  | postOffersIdAddFileResponse404
  | postOffersIdAddFileResponse406
  | postOffersIdAddFileResponse500;

export type postOffersIdAddFileResponse =
  postOffersIdAddFileResponseComposite & {
    headers: Headers;
  };

export const getPostOffersIdAddFileUrl = (
  id: number,
  params: PostOffersIdAddFileParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://admin-api.docs.keitaro.io/offers/${id}/add_file?${stringifiedParams}`
    : `https://admin-api.docs.keitaro.io/offers/${id}/add_file`;
};

export const postOffersIdAddFile = async (
  id: number,
  params: PostOffersIdAddFileParams,
  options?: RequestInit,
): Promise<postOffersIdAddFileResponse> => {
  return fetcher<postOffersIdAddFileResponse>(
    getPostOffersIdAddFileUrl(id, params),
    {
      ...options,
      method: 'POST',
    },
  );
};

/**
 * Moves offer to archive
 * @summary Delete offer
 */
export type deleteOffersIdArchiveResponse200 = {
  data: Offer;
  status: 200;
};

export type deleteOffersIdArchiveResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type deleteOffersIdArchiveResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type deleteOffersIdArchiveResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type deleteOffersIdArchiveResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type deleteOffersIdArchiveResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type deleteOffersIdArchiveResponseComposite =
  | deleteOffersIdArchiveResponse200
  | deleteOffersIdArchiveResponse400
  | deleteOffersIdArchiveResponse401
  | deleteOffersIdArchiveResponse402
  | deleteOffersIdArchiveResponse404
  | deleteOffersIdArchiveResponse500;

export type deleteOffersIdArchiveResponse =
  deleteOffersIdArchiveResponseComposite & {
    headers: Headers;
  };

export const getDeleteOffersIdArchiveUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/offers/${id}/archive`;
};

export const deleteOffersIdArchive = async (
  id: number,
  options?: RequestInit,
): Promise<deleteOffersIdArchiveResponse> => {
  return fetcher<deleteOffersIdArchiveResponse>(
    getDeleteOffersIdArchiveUrl(id),
    {
      ...options,
      method: 'DELETE',
    },
  );
};

/**
 * Clones offer
 * @summary Clone offer
 */
export type postOffersIdCloneResponse200 = {
  data: Offer;
  status: 200;
};

export type postOffersIdCloneResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postOffersIdCloneResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postOffersIdCloneResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postOffersIdCloneResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postOffersIdCloneResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postOffersIdCloneResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postOffersIdCloneResponseComposite =
  | postOffersIdCloneResponse200
  | postOffersIdCloneResponse400
  | postOffersIdCloneResponse401
  | postOffersIdCloneResponse402
  | postOffersIdCloneResponse404
  | postOffersIdCloneResponse406
  | postOffersIdCloneResponse500;

export type postOffersIdCloneResponse = postOffersIdCloneResponseComposite & {
  headers: Headers;
};

export const getPostOffersIdCloneUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/offers/${id}/clone`;
};

export const postOffersIdClone = async (
  id: number,
  options?: RequestInit,
): Promise<postOffersIdCloneResponse> => {
  return fetcher<postOffersIdCloneResponse>(getPostOffersIdCloneUrl(id), {
    ...options,
    method: 'POST',
  });
};

/**
 * Packs and downloads the files.
 * @summary Download
 */
export type getOffersIdDownloadResponse200 = {
  data: string;
  status: 200;
};

export type getOffersIdDownloadResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getOffersIdDownloadResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getOffersIdDownloadResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getOffersIdDownloadResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type getOffersIdDownloadResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type getOffersIdDownloadResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getOffersIdDownloadResponseComposite =
  | getOffersIdDownloadResponse200
  | getOffersIdDownloadResponse400
  | getOffersIdDownloadResponse401
  | getOffersIdDownloadResponse402
  | getOffersIdDownloadResponse404
  | getOffersIdDownloadResponse406
  | getOffersIdDownloadResponse500;

export type getOffersIdDownloadResponse =
  getOffersIdDownloadResponseComposite & {
    headers: Headers;
  };

export const getGetOffersIdDownloadUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/offers/${id}/download`;
};

export const getOffersIdDownload = async (
  id: number,
  options?: RequestInit,
): Promise<getOffersIdDownloadResponse> => {
  return fetcher<getOffersIdDownloadResponse>(getGetOffersIdDownloadUrl(id), {
    ...options,
    method: 'GET',
  });
};

/**
 * Read the Content of the File
 * @summary Read File
 */
export type getOffersIdGetFileResponse200 = {
  data: GetOffersIdGetFile200;
  status: 200;
};

export type getOffersIdGetFileResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getOffersIdGetFileResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getOffersIdGetFileResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getOffersIdGetFileResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type getOffersIdGetFileResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type getOffersIdGetFileResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getOffersIdGetFileResponseComposite =
  | getOffersIdGetFileResponse200
  | getOffersIdGetFileResponse400
  | getOffersIdGetFileResponse401
  | getOffersIdGetFileResponse402
  | getOffersIdGetFileResponse404
  | getOffersIdGetFileResponse406
  | getOffersIdGetFileResponse500;

export type getOffersIdGetFileResponse = getOffersIdGetFileResponseComposite & {
  headers: Headers;
};

export const getGetOffersIdGetFileUrl = (
  id: number,
  params: GetOffersIdGetFileParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://admin-api.docs.keitaro.io/offers/${id}/get_file?${stringifiedParams}`
    : `https://admin-api.docs.keitaro.io/offers/${id}/get_file`;
};

export const getOffersIdGetFile = async (
  id: number,
  params: GetOffersIdGetFileParams,
  options?: RequestInit,
): Promise<getOffersIdGetFileResponse> => {
  return fetcher<getOffersIdGetFileResponse>(
    getGetOffersIdGetFileUrl(id, params),
    {
      ...options,
      method: 'GET',
    },
  );
};

/**
 * Returns the file structure.
 * @summary Get file structure
 */
export type getOffersIdGetStructureResponse200 = {
  data: EditorFiles;
  status: 200;
};

export type getOffersIdGetStructureResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getOffersIdGetStructureResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getOffersIdGetStructureResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getOffersIdGetStructureResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type getOffersIdGetStructureResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type getOffersIdGetStructureResponse500 = {
  data: Error;
  status: 500;
};

export type getOffersIdGetStructureResponseComposite =
  | getOffersIdGetStructureResponse200
  | getOffersIdGetStructureResponse400
  | getOffersIdGetStructureResponse401
  | getOffersIdGetStructureResponse402
  | getOffersIdGetStructureResponse404
  | getOffersIdGetStructureResponse406
  | getOffersIdGetStructureResponse500;

export type getOffersIdGetStructureResponse =
  getOffersIdGetStructureResponseComposite & {
    headers: Headers;
  };

export const getGetOffersIdGetStructureUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/offers/${id}/get_structure`;
};

export const getOffersIdGetStructure = async (
  id: number,
  options?: RequestInit,
): Promise<getOffersIdGetStructureResponse> => {
  return fetcher<getOffersIdGetStructureResponse>(
    getGetOffersIdGetStructureUrl(id),
    {
      ...options,
      method: 'GET',
    },
  );
};

/**
 * Deletes the file.
 * @summary Delete file
 */
export type deleteOffersIdRemoveFileResponse200 = {
  data: DeleteOffersIdRemoveFile200;
  status: 200;
};

export type deleteOffersIdRemoveFileResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type deleteOffersIdRemoveFileResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type deleteOffersIdRemoveFileResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type deleteOffersIdRemoveFileResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type deleteOffersIdRemoveFileResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type deleteOffersIdRemoveFileResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type deleteOffersIdRemoveFileResponseComposite =
  | deleteOffersIdRemoveFileResponse200
  | deleteOffersIdRemoveFileResponse400
  | deleteOffersIdRemoveFileResponse401
  | deleteOffersIdRemoveFileResponse402
  | deleteOffersIdRemoveFileResponse404
  | deleteOffersIdRemoveFileResponse406
  | deleteOffersIdRemoveFileResponse500;

export type deleteOffersIdRemoveFileResponse =
  deleteOffersIdRemoveFileResponseComposite & {
    headers: Headers;
  };

export const getDeleteOffersIdRemoveFileUrl = (
  id: number,
  params: DeleteOffersIdRemoveFileParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://admin-api.docs.keitaro.io/offers/${id}/remove_file?${stringifiedParams}`
    : `https://admin-api.docs.keitaro.io/offers/${id}/remove_file`;
};

export const deleteOffersIdRemoveFile = async (
  id: number,
  params: DeleteOffersIdRemoveFileParams,
  options?: RequestInit,
): Promise<deleteOffersIdRemoveFileResponse> => {
  return fetcher<deleteOffersIdRemoveFileResponse>(
    getDeleteOffersIdRemoveFileUrl(id, params),
    {
      ...options,
      method: 'DELETE',
    },
  );
};

/**
 * Restore a offer
 * @summary Restore offer
 */
export type postOffersIdRestoreResponse201 = {
  data: Offer;
  status: 201;
};

export type postOffersIdRestoreResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postOffersIdRestoreResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postOffersIdRestoreResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postOffersIdRestoreResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postOffersIdRestoreResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postOffersIdRestoreResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postOffersIdRestoreResponseComposite =
  | postOffersIdRestoreResponse201
  | postOffersIdRestoreResponse400
  | postOffersIdRestoreResponse401
  | postOffersIdRestoreResponse402
  | postOffersIdRestoreResponse404
  | postOffersIdRestoreResponse406
  | postOffersIdRestoreResponse500;

export type postOffersIdRestoreResponse =
  postOffersIdRestoreResponseComposite & {
    headers: Headers;
  };

export const getPostOffersIdRestoreUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/offers/${id}/restore`;
};

export const postOffersIdRestore = async (
  id: number,
  options?: RequestInit,
): Promise<postOffersIdRestoreResponse> => {
  return fetcher<postOffersIdRestoreResponse>(getPostOffersIdRestoreUrl(id), {
    ...options,
    method: 'POST',
  });
};

/**
 * Saves file on server.
 * @summary Upload file
 */
export type putOffersIdUpdateFileResponse200 = {
  data: PutOffersIdUpdateFile200;
  status: 200;
};

export type putOffersIdUpdateFileResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type putOffersIdUpdateFileResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type putOffersIdUpdateFileResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type putOffersIdUpdateFileResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type putOffersIdUpdateFileResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type putOffersIdUpdateFileResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type putOffersIdUpdateFileResponseComposite =
  | putOffersIdUpdateFileResponse200
  | putOffersIdUpdateFileResponse400
  | putOffersIdUpdateFileResponse401
  | putOffersIdUpdateFileResponse402
  | putOffersIdUpdateFileResponse404
  | putOffersIdUpdateFileResponse406
  | putOffersIdUpdateFileResponse500;

export type putOffersIdUpdateFileResponse =
  putOffersIdUpdateFileResponseComposite & {
    headers: Headers;
  };

export const getPutOffersIdUpdateFileUrl = (
  id: number,
  params: PutOffersIdUpdateFileParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://admin-api.docs.keitaro.io/offers/${id}/update_file?${stringifiedParams}`
    : `https://admin-api.docs.keitaro.io/offers/${id}/update_file`;
};

export const putOffersIdUpdateFile = async (
  id: number,
  params: PutOffersIdUpdateFileParams,
  options?: RequestInit,
): Promise<putOffersIdUpdateFileResponse> => {
  return fetcher<putOffersIdUpdateFileResponse>(
    getPutOffersIdUpdateFileUrl(id, params),
    {
      ...options,
      method: 'PUT',
    },
  );
};

/**
 * Clean archive
 * @summary Clean archive
 */
export type postOffersCleanArchiveResponse200 = {
  data: void;
  status: 200;
};

export type postOffersCleanArchiveResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postOffersCleanArchiveResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postOffersCleanArchiveResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postOffersCleanArchiveResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postOffersCleanArchiveResponseComposite =
  | postOffersCleanArchiveResponse200
  | postOffersCleanArchiveResponse400
  | postOffersCleanArchiveResponse401
  | postOffersCleanArchiveResponse402
  | postOffersCleanArchiveResponse500;

export type postOffersCleanArchiveResponse =
  postOffersCleanArchiveResponseComposite & {
    headers: Headers;
  };

export const getPostOffersCleanArchiveUrl = () => {
  return `https://admin-api.docs.keitaro.io/offers/clean_archive`;
};

export const postOffersCleanArchive = async (
  options?: RequestInit,
): Promise<postOffersCleanArchiveResponse> => {
  return fetcher<postOffersCleanArchiveResponse>(
    getPostOffersCleanArchiveUrl(),
    {
      ...options,
      method: 'POST',
    },
  );
};

/**
 * Get deleted offers
 * @summary Get deleted offers
 */
export type getOffersDeletedResponse200 = {
  data: Offer[];
  status: 200;
};

export type getOffersDeletedResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getOffersDeletedResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getOffersDeletedResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getOffersDeletedResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getOffersDeletedResponseComposite =
  | getOffersDeletedResponse200
  | getOffersDeletedResponse400
  | getOffersDeletedResponse401
  | getOffersDeletedResponse402
  | getOffersDeletedResponse500;

export type getOffersDeletedResponse = getOffersDeletedResponseComposite & {
  headers: Headers;
};

export const getGetOffersDeletedUrl = () => {
  return `https://admin-api.docs.keitaro.io/offers/deleted`;
};

export const getOffersDeleted = async (
  options?: RequestInit,
): Promise<getOffersDeletedResponse> => {
  return fetcher<getOffersDeletedResponse>(getGetOffersDeletedUrl(), {
    ...options,
    method: 'GET',
  });
};
