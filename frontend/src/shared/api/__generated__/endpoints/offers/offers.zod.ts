/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keitaro Admin API
 * OpenAPI spec version: v1
 */
import { z as zod } from 'zod';

import { fetcher } from '../../../utils/fetcher';

/**
 * Returns list of the offers
 * @summary Get offers
 */
export const getOffersResponseItem = zod.object({
  id: zod.number().optional(),
  name: zod.string().optional(),
  group_id: zod.number().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  action_options: zod.object({}).optional(),
  affiliate_network_id: zod.number().optional(),
  payout_value: zod.number().optional(),
  payout_currency: zod.string().optional(),
  payout_type: zod.string().optional(),
  state: zod.string().optional(),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  payout_auto: zod.boolean().optional(),
  payout_upsell: zod.boolean().optional(),
  country: zod.array(zod.string()).optional(),
  notes: zod.string().optional(),
  affiliate_network: zod.string().optional(),
  archive: zod.string().optional(),
  local_path: zod.string().optional(),
  preview_path: zod.string().optional(),
  values: zod.array(zod.object({})).optional(),
});
export const getOffersResponse = zod.array(getOffersResponseItem);

/**
 * Creates offer
 * @summary Create offer
 */
export const postOffersBodyStateDefault = 'active';
export const postOffersBodyPayoutAutoDefault = false;
export const postOffersBodyPayoutUpsellDefault = false;
export const postOffersBodyConversionCapEnabledDefault = false;

export const postOffersBody = zod
  .object({
    name: zod.string().optional().describe('Offer name'),
    group_id: zod.number().optional().describe('Offer group ID'),
    offer_type: zod
      .string()
      .optional()
      .describe("Offer Type ('local'/'external'/'preloaded'/'action')"),
    action_type: zod.string().optional().describe('Action or redirect type'),
    action_payload: zod
      .string()
      .or(zod.object({}))
      .optional()
      .describe('Action payload or URL'),
    affiliate_network_id: zod
      .number()
      .optional()
      .describe('Affiliate network ID'),
    payout_value: zod.number().optional().describe('Payout value'),
    payout_currency: zod.string().optional().describe('Payout currency'),
    payout_type: zod.enum(['CPA', 'CPC']).optional().describe('Payout type'),
    state: zod
      .enum(['active', 'deleted'])
      .default(postOffersBodyStateDefault)
      .describe('Offer State'),
    payout_auto: zod
      .boolean()
      .optional()
      .describe('If true, offer receives payout value from postback'),
    payout_upsell: zod
      .boolean()
      .optional()
      .describe('Allow offer to get upsells'),
    country: zod
      .array(zod.string())
      .optional()
      .describe('Country codes (i.g, [\"US\", \"DE\", \"JP\"])'),
    notes: zod.string().optional().describe('Notes'),
    archive: zod.string().optional().describe('ZIP-file encoded to base64'),
    conversion_cap_enabled: zod
      .boolean()
      .optional()
      .describe('Turn on that feature if the offer limit conversions per day'),
    daily_cap: zod
      .number()
      .optional()
      .describe(
        'Daily limit of conversions, after which the tracker will send traffic to another offer'
      ),
    conversion_timezone: zod
      .string()
      .optional()
      .describe(
        'Which timezone is being used by the Affiliate network for calculating conversions, e.g. UTC or Europe/Madrid'
      ),
    alternative_offer_id: zod
      .number()
      .optional()
      .describe('Offer id, where to send traffic when daily limit is reached'),
  })
  .and(zod.any());

export const postOffersResponse = zod.object({
  id: zod.number().optional(),
  name: zod.string().optional(),
  group_id: zod.number().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  action_options: zod.object({}).optional(),
  affiliate_network_id: zod.number().optional(),
  payout_value: zod.number().optional(),
  payout_currency: zod.string().optional(),
  payout_type: zod.string().optional(),
  state: zod.string().optional(),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  payout_auto: zod.boolean().optional(),
  payout_upsell: zod.boolean().optional(),
  country: zod.array(zod.string()).optional(),
  notes: zod.string().optional(),
  affiliate_network: zod.string().optional(),
  archive: zod.string().optional(),
  local_path: zod.string().optional(),
  preview_path: zod.string().optional(),
  values: zod.array(zod.object({})).optional(),
});

/**
 * Returns offer
 * @summary Get offer
 */
export const getOffersIdParams = zod.object({
  id: zod.number().describe('Offer ID'),
});

export const getOffersIdResponse = zod.object({
  id: zod.number().optional(),
  name: zod.string().optional(),
  group_id: zod.number().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  action_options: zod.object({}).optional(),
  affiliate_network_id: zod.number().optional(),
  payout_value: zod.number().optional(),
  payout_currency: zod.string().optional(),
  payout_type: zod.string().optional(),
  state: zod.string().optional(),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  payout_auto: zod.boolean().optional(),
  payout_upsell: zod.boolean().optional(),
  country: zod.array(zod.string()).optional(),
  notes: zod.string().optional(),
  affiliate_network: zod.string().optional(),
  archive: zod.string().optional(),
  local_path: zod.string().optional(),
  preview_path: zod.string().optional(),
  values: zod.array(zod.object({})).optional(),
});

/**
 * Updates offer
 * @summary Update offer
 */
export const putOffersIdParams = zod.object({
  id: zod.number().describe('Offer ID'),
});

export const putOffersIdBodyStateDefault = 'active';
export const putOffersIdBodyPayoutAutoDefault = false;
export const putOffersIdBodyPayoutUpsellDefault = false;
export const putOffersIdBodyConversionCapEnabledDefault = false;

export const putOffersIdBody = zod.object({
  name: zod.string().optional().describe('Offer name'),
  group_id: zod.number().optional().describe('Offer group ID'),
  offer_type: zod
    .string()
    .optional()
    .describe("Offer Type ('local'/'external'/'preloaded'/'action')"),
  action_type: zod.string().optional().describe('Action or redirect type'),
  action_payload: zod
    .string()
    .or(zod.object({}))
    .optional()
    .describe('Action payload or URL'),
  affiliate_network_id: zod
    .number()
    .optional()
    .describe('Affiliate network ID'),
  payout_value: zod.number().optional().describe('Payout value'),
  payout_currency: zod.string().optional().describe('Payout currency'),
  payout_type: zod.enum(['CPA', 'CPC']).optional().describe('Payout type'),
  state: zod
    .enum(['active', 'deleted'])
    .default(putOffersIdBodyStateDefault)
    .describe('Offer State'),
  payout_auto: zod
    .boolean()
    .optional()
    .describe('If true, offer receives payout value from postback'),
  payout_upsell: zod
    .boolean()
    .optional()
    .describe('Allow offer to get upsells'),
  country: zod
    .array(zod.string())
    .optional()
    .describe('Country codes (i.g, [\"US\", \"DE\", \"JP\"])'),
  notes: zod.string().optional().describe('Notes'),
  archive: zod.string().optional().describe('ZIP-file encoded to base64'),
  conversion_cap_enabled: zod
    .boolean()
    .optional()
    .describe('Turn on that feature if the offer limit conversions per day'),
  daily_cap: zod
    .number()
    .optional()
    .describe(
      'Daily limit of conversions, after which the tracker will send traffic to another offer'
    ),
  conversion_timezone: zod
    .string()
    .optional()
    .describe(
      'Which timezone is being used by the Affiliate network for calculating conversions, e.g. UTC or Europe/Madrid'
    ),
  alternative_offer_id: zod
    .number()
    .optional()
    .describe('Offer id, where to send traffic when daily limit is reached'),
});

export const putOffersIdResponse = zod.object({
  id: zod.number().optional(),
  name: zod.string().optional(),
  group_id: zod.number().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  action_options: zod.object({}).optional(),
  affiliate_network_id: zod.number().optional(),
  payout_value: zod.number().optional(),
  payout_currency: zod.string().optional(),
  payout_type: zod.string().optional(),
  state: zod.string().optional(),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  payout_auto: zod.boolean().optional(),
  payout_upsell: zod.boolean().optional(),
  country: zod.array(zod.string()).optional(),
  notes: zod.string().optional(),
  affiliate_network: zod.string().optional(),
  archive: zod.string().optional(),
  local_path: zod.string().optional(),
  preview_path: zod.string().optional(),
  values: zod.array(zod.object({})).optional(),
});

/**
 * Create the File of the Local Offer
 * @summary Create file
 */
export const postOffersIdAddFileParams = zod.object({
  id: zod.number().describe('Offer ID'),
});

export const postOffersIdAddFileQueryParams = zod.object({
  path: zod.string().describe('Path to the File'),
});

export const postOffersIdAddFileResponse = zod.object({
  path: zod.string().optional(),
});

/**
 * Moves offer to archive
 * @summary Delete offer
 */
export const deleteOffersIdArchiveParams = zod.object({
  id: zod.number().describe('Offer ID'),
});

export const deleteOffersIdArchiveResponse = zod.object({
  id: zod.number().optional(),
  name: zod.string().optional(),
  group_id: zod.number().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  action_options: zod.object({}).optional(),
  affiliate_network_id: zod.number().optional(),
  payout_value: zod.number().optional(),
  payout_currency: zod.string().optional(),
  payout_type: zod.string().optional(),
  state: zod.string().optional(),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  payout_auto: zod.boolean().optional(),
  payout_upsell: zod.boolean().optional(),
  country: zod.array(zod.string()).optional(),
  notes: zod.string().optional(),
  affiliate_network: zod.string().optional(),
  archive: zod.string().optional(),
  local_path: zod.string().optional(),
  preview_path: zod.string().optional(),
  values: zod.array(zod.object({})).optional(),
});

/**
 * Clones offer
 * @summary Clone offer
 */
export const postOffersIdCloneParams = zod.object({
  id: zod.number().describe('Offer ID'),
});

export const postOffersIdCloneResponse = zod.object({
  id: zod.number().optional(),
  name: zod.string().optional(),
  group_id: zod.number().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  action_options: zod.object({}).optional(),
  affiliate_network_id: zod.number().optional(),
  payout_value: zod.number().optional(),
  payout_currency: zod.string().optional(),
  payout_type: zod.string().optional(),
  state: zod.string().optional(),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  payout_auto: zod.boolean().optional(),
  payout_upsell: zod.boolean().optional(),
  country: zod.array(zod.string()).optional(),
  notes: zod.string().optional(),
  affiliate_network: zod.string().optional(),
  archive: zod.string().optional(),
  local_path: zod.string().optional(),
  preview_path: zod.string().optional(),
  values: zod.array(zod.object({})).optional(),
});

/**
 * Packs and downloads the files.
 * @summary Download
 */
export const getOffersIdDownloadParams = zod.object({
  id: zod.number().describe('Offer ID'),
});

/**
 * Read the Content of the File
 * @summary Read File
 */
export const getOffersIdGetFileParams = zod.object({
  id: zod.number().describe('Offer ID'),
});

export const getOffersIdGetFileQueryParams = zod.object({
  path: zod.string().describe('File path, i.e. `order/success.html`.'),
});

export const getOffersIdGetFileResponse = zod.object({
  data: zod.string().optional(),
});

/**
 * Returns the file structure.
 * @summary Get file structure
 */
export const getOffersIdGetStructureParams = zod.object({
  id: zod.number().describe('Offer ID'),
});

export const getOffersIdGetStructureResponse = zod.object({
  name: zod.string().optional(),
  type: zod.string().optional(),
  ext: zod.string().optional(),
  path: zod.string().optional(),
  children: zod.array(zod.any()).optional(),
});

/**
 * Deletes the file.
 * @summary Delete file
 */
export const deleteOffersIdRemoveFileParams = zod.object({
  id: zod.number().describe('Offer ID'),
});

export const deleteOffersIdRemoveFileQueryParams = zod.object({
  path: zod.string().describe('File path'),
});

export const deleteOffersIdRemoveFileResponse = zod.object({
  success: zod.boolean().optional(),
});

/**
 * Restore a offer
 * @summary Restore offer
 */
export const postOffersIdRestoreParams = zod.object({
  id: zod.number().describe('Offer ID'),
});

/**
 * Saves file on server.
 * @summary Upload file
 */
export const putOffersIdUpdateFileParams = zod.object({
  id: zod.number().describe('Offer ID'),
});

export const putOffersIdUpdateFileQueryParams = zod.object({
  path: zod.string().describe('File path'),
  data: zod.string().describe('File cointent'),
});

export const putOffersIdUpdateFileResponse = zod.object({
  path: zod.string().optional(),
});

/**
 * Get deleted offers
 * @summary Get deleted offers
 */
export const getOffersDeletedResponseItem = zod.object({
  id: zod.number().optional(),
  name: zod.string().optional(),
  group_id: zod.number().optional(),
  action_type: zod.string().optional(),
  action_payload: zod.string().or(zod.object({})).optional(),
  action_options: zod.object({}).optional(),
  affiliate_network_id: zod.number().optional(),
  payout_value: zod.number().optional(),
  payout_currency: zod.string().optional(),
  payout_type: zod.string().optional(),
  state: zod.string().optional(),
  created_at: zod.string().optional(),
  updated_at: zod.string().optional(),
  payout_auto: zod.boolean().optional(),
  payout_upsell: zod.boolean().optional(),
  country: zod.array(zod.string()).optional(),
  notes: zod.string().optional(),
  affiliate_network: zod.string().optional(),
  archive: zod.string().optional(),
  local_path: zod.string().optional(),
  preview_path: zod.string().optional(),
  values: zod.array(zod.object({})).optional(),
});
export const getOffersDeletedResponse = zod.array(getOffersDeletedResponseItem);
