/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Keitaro Admin API
 * OpenAPI spec version: v1
 */
import type {
  BadRequestResponse,
  InternalErrorResponse,
  NotAcceptableResponse,
  NotFoundResponse,
  PaymentRequiredResponse,
  Source,
  SourceRequest,
  UnauthorizedResponse,
} from '../../models';

import { fetcher } from '../../../utils/fetcher';

/**
 * Returns list of traffic sources
 * @summary Get traffic sources
 */
export type getTrafficSourcesResponse200 = {
  data: Source[];
  status: 200;
};

export type getTrafficSourcesResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getTrafficSourcesResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getTrafficSourcesResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getTrafficSourcesResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getTrafficSourcesResponseComposite =
  | getTrafficSourcesResponse200
  | getTrafficSourcesResponse400
  | getTrafficSourcesResponse401
  | getTrafficSourcesResponse402
  | getTrafficSourcesResponse500;

export type getTrafficSourcesResponse = getTrafficSourcesResponseComposite & {
  headers: Headers;
};

export const getGetTrafficSourcesUrl = () => {
  return `https://admin-api.docs.keitaro.io/traffic_sources`;
};

export const getTrafficSources = async (
  options?: RequestInit,
): Promise<getTrafficSourcesResponse> => {
  return fetcher<getTrafficSourcesResponse>(getGetTrafficSourcesUrl(), {
    ...options,
    method: 'GET',
  });
};

/**
 * Creates traffic source
 * @summary Create traffic source
 */
export type postTrafficSourcesResponse200 = {
  data: Source;
  status: 200;
};

export type postTrafficSourcesResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postTrafficSourcesResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postTrafficSourcesResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postTrafficSourcesResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postTrafficSourcesResponseComposite =
  | postTrafficSourcesResponse200
  | postTrafficSourcesResponse401
  | postTrafficSourcesResponse402
  | postTrafficSourcesResponse406
  | postTrafficSourcesResponse500;

export type postTrafficSourcesResponse = postTrafficSourcesResponseComposite & {
  headers: Headers;
};

export const getPostTrafficSourcesUrl = () => {
  return `https://admin-api.docs.keitaro.io/traffic_sources`;
};

export const postTrafficSources = async (
  sourceRequest: SourceRequest,
  options?: RequestInit,
): Promise<postTrafficSourcesResponse> => {
  return fetcher<postTrafficSourcesResponse>(getPostTrafficSourcesUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(sourceRequest),
  });
};

/**
 * Returns traffic source details.
 * @summary Get traffic source
 */
export type getTrafficSourcesIdResponse200 = {
  data: Source;
  status: 200;
};

export type getTrafficSourcesIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type getTrafficSourcesIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type getTrafficSourcesIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type getTrafficSourcesIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type getTrafficSourcesIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type getTrafficSourcesIdResponseComposite =
  | getTrafficSourcesIdResponse200
  | getTrafficSourcesIdResponse400
  | getTrafficSourcesIdResponse401
  | getTrafficSourcesIdResponse402
  | getTrafficSourcesIdResponse404
  | getTrafficSourcesIdResponse500;

export type getTrafficSourcesIdResponse =
  getTrafficSourcesIdResponseComposite & {
    headers: Headers;
  };

export const getGetTrafficSourcesIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/traffic_sources/${id}`;
};

export const getTrafficSourcesId = async (
  id: number,
  options?: RequestInit,
): Promise<getTrafficSourcesIdResponse> => {
  return fetcher<getTrafficSourcesIdResponse>(getGetTrafficSourcesIdUrl(id), {
    ...options,
    method: 'GET',
  });
};

/**
 * Updates traffic source.
 * @summary Update traffic source
 */
export type putTrafficSourcesIdResponse200 = {
  data: Source;
  status: 200;
};

export type putTrafficSourcesIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type putTrafficSourcesIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type putTrafficSourcesIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type putTrafficSourcesIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type putTrafficSourcesIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type putTrafficSourcesIdResponseComposite =
  | putTrafficSourcesIdResponse200
  | putTrafficSourcesIdResponse400
  | putTrafficSourcesIdResponse401
  | putTrafficSourcesIdResponse402
  | putTrafficSourcesIdResponse404
  | putTrafficSourcesIdResponse500;

export type putTrafficSourcesIdResponse =
  putTrafficSourcesIdResponseComposite & {
    headers: Headers;
  };

export const getPutTrafficSourcesIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/traffic_sources/${id}`;
};

export const putTrafficSourcesId = async (
  id: number,
  sourceRequest: SourceRequest,
  options?: RequestInit,
): Promise<putTrafficSourcesIdResponse> => {
  return fetcher<putTrafficSourcesIdResponse>(getPutTrafficSourcesIdUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(sourceRequest),
  });
};

/**
 * Changes the state to 'deleted'.
 * @summary Delete traffic source
 */
export type deleteTrafficSourcesIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteTrafficSourcesIdResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type deleteTrafficSourcesIdResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type deleteTrafficSourcesIdResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type deleteTrafficSourcesIdResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type deleteTrafficSourcesIdResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type deleteTrafficSourcesIdResponseComposite =
  | deleteTrafficSourcesIdResponse200
  | deleteTrafficSourcesIdResponse400
  | deleteTrafficSourcesIdResponse401
  | deleteTrafficSourcesIdResponse402
  | deleteTrafficSourcesIdResponse404
  | deleteTrafficSourcesIdResponse500;

export type deleteTrafficSourcesIdResponse =
  deleteTrafficSourcesIdResponseComposite & {
    headers: Headers;
  };

export const getDeleteTrafficSourcesIdUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/traffic_sources/${id}`;
};

export const deleteTrafficSourcesId = async (
  id: number,
  options?: RequestInit,
): Promise<deleteTrafficSourcesIdResponse> => {
  return fetcher<deleteTrafficSourcesIdResponse>(
    getDeleteTrafficSourcesIdUrl(id),
    {
      ...options,
      method: 'DELETE',
    },
  );
};

/**
 * Makes a copy of traffic source.
 * @summary Clone trafic source
 */
export type postTrafficSourcesIdCloneResponse200 = {
  data: Source;
  status: 200;
};

export type postTrafficSourcesIdCloneResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postTrafficSourcesIdCloneResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postTrafficSourcesIdCloneResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postTrafficSourcesIdCloneResponse404 = {
  data: NotFoundResponse;
  status: 404;
};

export type postTrafficSourcesIdCloneResponse406 = {
  data: NotAcceptableResponse;
  status: 406;
};

export type postTrafficSourcesIdCloneResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postTrafficSourcesIdCloneResponseComposite =
  | postTrafficSourcesIdCloneResponse200
  | postTrafficSourcesIdCloneResponse400
  | postTrafficSourcesIdCloneResponse401
  | postTrafficSourcesIdCloneResponse402
  | postTrafficSourcesIdCloneResponse404
  | postTrafficSourcesIdCloneResponse406
  | postTrafficSourcesIdCloneResponse500;

export type postTrafficSourcesIdCloneResponse =
  postTrafficSourcesIdCloneResponseComposite & {
    headers: Headers;
  };

export const getPostTrafficSourcesIdCloneUrl = (id: number) => {
  return `https://admin-api.docs.keitaro.io/traffic_sources/${id}/clone`;
};

export const postTrafficSourcesIdClone = async (
  id: number,
  options?: RequestInit,
): Promise<postTrafficSourcesIdCloneResponse> => {
  return fetcher<postTrafficSourcesIdCloneResponse>(
    getPostTrafficSourcesIdCloneUrl(id),
    {
      ...options,
      method: 'POST',
    },
  );
};

/**
 * Clean archive
 * @summary Clean archive
 */
export type postTrafficSourcesCleanArchiveResponse200 = {
  data: void;
  status: 200;
};

export type postTrafficSourcesCleanArchiveResponse400 = {
  data: BadRequestResponse;
  status: 400;
};

export type postTrafficSourcesCleanArchiveResponse401 = {
  data: UnauthorizedResponse;
  status: 401;
};

export type postTrafficSourcesCleanArchiveResponse402 = {
  data: PaymentRequiredResponse;
  status: 402;
};

export type postTrafficSourcesCleanArchiveResponse500 = {
  data: InternalErrorResponse;
  status: 500;
};

export type postTrafficSourcesCleanArchiveResponseComposite =
  | postTrafficSourcesCleanArchiveResponse200
  | postTrafficSourcesCleanArchiveResponse400
  | postTrafficSourcesCleanArchiveResponse401
  | postTrafficSourcesCleanArchiveResponse402
  | postTrafficSourcesCleanArchiveResponse500;

export type postTrafficSourcesCleanArchiveResponse =
  postTrafficSourcesCleanArchiveResponseComposite & {
    headers: Headers;
  };

export const getPostTrafficSourcesCleanArchiveUrl = () => {
  return `https://admin-api.docs.keitaro.io/traffic_sources/clean_archive`;
};

export const postTrafficSourcesCleanArchive = async (
  options?: RequestInit,
): Promise<postTrafficSourcesCleanArchiveResponse> => {
  return fetcher<postTrafficSourcesCleanArchiveResponse>(
    getPostTrafficSourcesCleanArchiveUrl(),
    {
      ...options,
      method: 'POST',
    },
  );
};
