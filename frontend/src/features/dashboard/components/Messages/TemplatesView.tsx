'use client';

import { useState } from 'react';
import { Input } from '@/shared/ui/input';
import { Button } from '@/shared/ui/button';
import { Select } from '@/shared/ui/select';
import { CreateCategoryModal } from '@/features/dashboard/components/Messages/CreateCategoryModal';
import CreateTemplateModal from '@/features/dashboard/components/Messages/CreateTemplateModal';
import EditTemplateModal from '@/features/dashboard/components/Messages/EditTemplateModal';
import TemplateCard, { TemplateData } from '@/features/dashboard/components/Messages/TemplateCard';

const categoryOptions = [
  { label: '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', value: 'all' },
  { label: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ', value: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ' },
  { label: '–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç', value: '–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ö–æ–Ω—Ç–∞–∫—Ç' },
  { label: '–°—Ä–æ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', value: '–°—Ä–æ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' },
  { label: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', value: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' },
  { label: '–ù–µ–¥–æ–∑–≤–æ–Ω', value: '–ù–µ–¥–æ–∑–≤–æ–Ω' },
];

const statusOptions = [
  { label: '–í—Å–µ', value: 'all' },
  { label: '–ê–∫—Ç–∏–≤–Ω—ã–µ', value: 'active' },
  { label: '–ü–∞—É–∑–∞', value: 'paused' },
];

const initialTemplates: TemplateData[] = [
  {
    title: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
    category: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ',
    message:
      '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
    isActive: true,
  },
  {
    title: '–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç',
    category: '–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ö–æ–Ω—Ç–∞–∫—Ç',
    message:
      '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ú—ã –ø—ã—Ç–∞–ª–∏—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ —Ä–∞–Ω–µ–µ. –ï—Å—Ç—å –≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å.',
    isActive: true,
  },
  {
    title: '–°—Ä–æ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
    category: '–°—Ä–æ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
    message:
      'üî• –¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 30% –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.',
    isActive: false,
  },
  {
    title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ',
    category: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
    message:
      '–í—ã –æ—Å—Ç–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ. –ú—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º.',
    isActive: false,
  },
  {
    title: '–ù–µ–¥–æ–∑–≤–æ–Ω',
    category: '–ù–µ–¥–æ–∑–≤–æ–Ω',
    message:
      '–ú—ã –ø—ã—Ç–∞–ª–∏—Å—å –¥–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è –≤–∞–º, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –æ—Ç–≤–µ—Ç –∏–ª–∏ –∂–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞.',
    isActive: false,
  },
];

export const TemplatesView = () => {
  const [category, setCategory] = useState<string>('all');
  const [status, setStatus] = useState<string>('all');
  const [templates, setTemplates] = useState<TemplateData[]>(initialTemplates);
  const [isCreateCategoryOpen, setCreateCategoryOpen] = useState(false);
  const [isCreateTemplateOpen, setCreateTemplateOpen] = useState(false);
  const [editingTemplate, setEditingTemplate] = useState<TemplateData | null>(
    null
  );
  const [editingIndex, setEditingIndex] = useState<number | null>(null);

  const handleToggle = (index: number) => {
    setTemplates((prev) =>
      prev.map((tpl, idx) =>
        idx === index ? { ...tpl, isActive: !tpl.isActive } : tpl
      )
    );
  };

  const handleEdit = (index: number, updated: TemplateData) => {
    setTemplates((prev) =>
      prev.map((tpl, idx) => (idx === index ? updated : tpl))
    );
  };

  const handleCopy = (index: number) => {
    const copied = {
      ...templates[index],
      title: templates[index].title + ' (–∫–æ–ø–∏—è)',
    };
    setTemplates((prev) => [...prev, copied]);
  };

  const handleDelete = (index: number) => {
    setTemplates((prev) => prev.filter((_, idx) => idx !== index));
  };

  const filteredTemplates = Array.isArray(templates) ? templates.filter((t) => {
    const byCategory = category === 'all' || t.category === category;
    const byStatus =
      status === 'all' ||
      (status === 'active' && t.isActive) ||
      (status === 'paused' && !t.isActive);
    return byCategory && byStatus;
  }) : [];

  return (
    <div className="p-6 space-y-6">
      <div>
        <h2 className="text-xl font-semibold">–ì–æ—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</h2>
        <p className="text-sm text-muted-foreground">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        </p>
      </div>

      <div className="flex flex-wrap items-center justify-between gap-4">
        <div className="flex flex-1 gap-4">
          <Input
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É..."
            className="w-full"
          />
          <Select
            value={category}
            onChange={setCategory}
            options={categoryOptions}
            placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
          />
          <Select
            value={status}
            onChange={setStatus}
            options={statusOptions}
            placeholder="–°—Ç–∞—Ç—É—Å"
          />
        </div>
        <div className="flex gap-2">
          <button
            className="flex items-center gap-2 rounded-md px-5 py-2 text-sm font-semibold text-white shadow-sm transition-all"
            style={{
              background: 'linear-gradient(90deg, #D946EF 0%, #EC4899 100%)',
            }}
            onClick={() => setCreateCategoryOpen(true)}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={1.5}
              stroke="white"
              className="h-4 w-4"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M3 7a2 2 0 012-2h4l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2V7z"
              />
            </svg>
            –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
          </button>

          <button
            className="flex items-center gap-2 rounded-md px-5 py-2 text-sm font-semibold text-white shadow-sm transition-all"
            style={{
              background: 'linear-gradient(90deg, #3B82F6 0%, #6366F1 100%)',
            }}
            onClick={() => setCreateTemplateOpen(true)}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={2}
              stroke="white"
              className="h-4 w-4"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M12 4.5v15m7.5-7.5h-15"
              />
            </svg>
            –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
          </button>
        </div>
      </div>

      <div className="space-y-4">
        {filteredTemplates.map((template, idx) => (
          <TemplateCard
            key={idx}
            data={template}
            onToggle={() => handleToggle(idx)}
            onEdit={() => {
              setEditingTemplate(template);
              setEditingIndex(idx);
            }}
            onCopy={() => handleCopy(idx)}
            onDelete={() => handleDelete(idx)}
          />
        ))}
      </div>

      <CreateCategoryModal
        open={isCreateCategoryOpen}
        onClose={() => setCreateCategoryOpen(false)}
        onSubmit={() => { }}
      />

      <CreateTemplateModal
        open={isCreateTemplateOpen}
        onClose={() => setCreateTemplateOpen(false)}
        onSubmit={(template: TemplateData) => {
          setTemplates((prev) => [...prev, template]);
        }}
      />

      {editingTemplate && editingIndex !== null && (
        <EditTemplateModal
          open={!!editingTemplate}
          template={editingTemplate}
          onClose={() => setEditingTemplate(null)}
          onSubmit={(updated) => {
            if (editingIndex !== null) {
              handleEdit(editingIndex, updated);
            }
            setEditingTemplate(null);
            setEditingIndex(null);
          }}
        />
      )}
    </div>
  );
};
